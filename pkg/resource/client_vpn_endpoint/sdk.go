// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package client_vpn_endpoint

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.ClientVPNEndpoint{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeClientVpnEndpointsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeClientVpnEndpoints", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.ClientVpnEndpoints {
		if elem.AuthenticationOptions != nil {
			f1 := []*svcapitypes.ClientVPNAuthenticationRequest{}
			for _, f1iter := range elem.AuthenticationOptions {
				f1elem := &svcapitypes.ClientVPNAuthenticationRequest{}
				if f1iter.ActiveDirectory != nil {
					f1elemf0 := &svcapitypes.DirectoryServiceAuthenticationRequest{}
					if f1iter.ActiveDirectory.DirectoryId != nil {
						f1elemf0.DirectoryID = f1iter.ActiveDirectory.DirectoryId
					}
					f1elem.ActiveDirectory = f1elemf0
				}
				if f1iter.FederatedAuthentication != nil {
					f1elemf1 := &svcapitypes.FederatedAuthenticationRequest{}
					f1elem.FederatedAuthentication = f1elemf1
				}
				if f1iter.MutualAuthentication != nil {
					f1elemf2 := &svcapitypes.CertificateAuthenticationRequest{}
					f1elem.MutualAuthentication = f1elemf2
				}
				if f1iter.Type != nil {
					f1elem.Type = f1iter.Type
				}
				f1 = append(f1, f1elem)
			}
			ko.Spec.AuthenticationOptions = f1
		}
		if elem.ClientCidrBlock != nil {
			ko.Spec.ClientCIDRBlock = elem.ClientCidrBlock
		}
		if elem.ClientConnectOptions != nil {
			f3 := &svcapitypes.ClientConnectOptions{}
			if elem.ClientConnectOptions.Enabled != nil {
				f3.Enabled = elem.ClientConnectOptions.Enabled
			}
			if elem.ClientConnectOptions.LambdaFunctionArn != nil {
				f3.LambdaFunctionARN = elem.ClientConnectOptions.LambdaFunctionArn
			}
			ko.Spec.ClientConnectOptions = f3
		}
		if elem.ClientVpnEndpointId != nil {
			ko.Status.ClientVPNEndpointID = elem.ClientVpnEndpointId
		}
		if elem.ConnectionLogOptions != nil {
			f5 := &svcapitypes.ConnectionLogOptions{}
			if elem.ConnectionLogOptions.CloudwatchLogGroup != nil {
				f5.CloudwatchLogGroup = elem.ConnectionLogOptions.CloudwatchLogGroup
			}
			if elem.ConnectionLogOptions.CloudwatchLogStream != nil {
				f5.CloudwatchLogStream = elem.ConnectionLogOptions.CloudwatchLogStream
			}
			if elem.ConnectionLogOptions.Enabled != nil {
				f5.Enabled = elem.ConnectionLogOptions.Enabled
			}
			ko.Spec.ConnectionLogOptions = f5
		}
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		}
		if elem.DnsName != nil {
			ko.Status.DNSName = elem.DnsName
		}
		if elem.DnsServers != nil {
			f10 := []*string{}
			for _, f10iter := range elem.DnsServers {
				var f10elem string
				f10elem = *f10iter
				f10 = append(f10, &f10elem)
			}
			ko.Spec.DNSServers = f10
		}
		if elem.SecurityGroupIds != nil {
			f11 := []*string{}
			for _, f11iter := range elem.SecurityGroupIds {
				var f11elem string
				f11elem = *f11iter
				f11 = append(f11, &f11elem)
			}
			ko.Spec.SecurityGroupIDs = f11
		}
		if elem.ServerCertificateArn != nil {
			ko.Spec.ServerCertificateARN = elem.ServerCertificateArn
		}
		if elem.SplitTunnel != nil {
			ko.Spec.SplitTunnel = elem.SplitTunnel
		}
		if elem.Status != nil {
			f15 := &svcapitypes.ClientVPNEndpointStatus_SDK{}
			if elem.Status.Code != nil {
				f15.Code = elem.Status.Code
			}
			if elem.Status.Message != nil {
				f15.Message = elem.Status.Message
			}
			ko.Status.Status = f15
		}
		if elem.TransportProtocol != nil {
			ko.Spec.TransportProtocol = elem.TransportProtocol
		}
		if elem.VpcId != nil {
			ko.Spec.VPCID = elem.VpcId
		}
		if elem.VpnPort != nil {
			ko.Spec.VPNPort = elem.VpnPort
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeClientVpnEndpointsInput, error) {
	res := &svcsdk.DescribeClientVpnEndpointsInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateClientVpnEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateClientVpnEndpoint", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.ClientVpnEndpointId != nil {
		ko.Status.ClientVPNEndpointID = resp.ClientVpnEndpointId
	}
	if resp.DnsName != nil {
		ko.Status.DNSName = resp.DnsName
	}
	if resp.Status != nil {
		f2 := &svcapitypes.ClientVPNEndpointStatus_SDK{}
		if resp.Status.Code != nil {
			f2.Code = resp.Status.Code
		}
		if resp.Status.Message != nil {
			f2.Message = resp.Status.Message
		}
		ko.Status.Status = f2
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateClientVpnEndpointInput, error) {
	res := &svcsdk.CreateClientVpnEndpointInput{}

	if r.ko.Spec.AuthenticationOptions != nil {
		f0 := []*svcsdk.ClientVpnAuthenticationRequest{}
		for _, f0iter := range r.ko.Spec.AuthenticationOptions {
			f0elem := &svcsdk.ClientVpnAuthenticationRequest{}
			if f0iter.ActiveDirectory != nil {
				f0elemf0 := &svcsdk.DirectoryServiceAuthenticationRequest{}
				if f0iter.ActiveDirectory.DirectoryID != nil {
					f0elemf0.SetDirectoryId(*f0iter.ActiveDirectory.DirectoryID)
				}
				f0elem.SetActiveDirectory(f0elemf0)
			}
			if f0iter.FederatedAuthentication != nil {
				f0elemf1 := &svcsdk.FederatedAuthenticationRequest{}
				if f0iter.FederatedAuthentication.SAMLProviderARN != nil {
					f0elemf1.SetSAMLProviderArn(*f0iter.FederatedAuthentication.SAMLProviderARN)
				}
				if f0iter.FederatedAuthentication.SelfServiceSAMLProviderARN != nil {
					f0elemf1.SetSelfServiceSAMLProviderArn(*f0iter.FederatedAuthentication.SelfServiceSAMLProviderARN)
				}
				f0elem.SetFederatedAuthentication(f0elemf1)
			}
			if f0iter.MutualAuthentication != nil {
				f0elemf2 := &svcsdk.CertificateAuthenticationRequest{}
				if f0iter.MutualAuthentication.ClientRootCertificateChainARN != nil {
					f0elemf2.SetClientRootCertificateChainArn(*f0iter.MutualAuthentication.ClientRootCertificateChainARN)
				}
				f0elem.SetMutualAuthentication(f0elemf2)
			}
			if f0iter.Type != nil {
				f0elem.SetType(*f0iter.Type)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAuthenticationOptions(f0)
	}
	if r.ko.Spec.ClientCIDRBlock != nil {
		res.SetClientCidrBlock(*r.ko.Spec.ClientCIDRBlock)
	}
	if r.ko.Spec.ClientConnectOptions != nil {
		f2 := &svcsdk.ClientConnectOptions{}
		if r.ko.Spec.ClientConnectOptions.Enabled != nil {
			f2.SetEnabled(*r.ko.Spec.ClientConnectOptions.Enabled)
		}
		if r.ko.Spec.ClientConnectOptions.LambdaFunctionARN != nil {
			f2.SetLambdaFunctionArn(*r.ko.Spec.ClientConnectOptions.LambdaFunctionARN)
		}
		res.SetClientConnectOptions(f2)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.ConnectionLogOptions != nil {
		f4 := &svcsdk.ConnectionLogOptions{}
		if r.ko.Spec.ConnectionLogOptions.CloudwatchLogGroup != nil {
			f4.SetCloudwatchLogGroup(*r.ko.Spec.ConnectionLogOptions.CloudwatchLogGroup)
		}
		if r.ko.Spec.ConnectionLogOptions.CloudwatchLogStream != nil {
			f4.SetCloudwatchLogStream(*r.ko.Spec.ConnectionLogOptions.CloudwatchLogStream)
		}
		if r.ko.Spec.ConnectionLogOptions.Enabled != nil {
			f4.SetEnabled(*r.ko.Spec.ConnectionLogOptions.Enabled)
		}
		res.SetConnectionLogOptions(f4)
	}
	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DNSServers != nil {
		f6 := []*string{}
		for _, f6iter := range r.ko.Spec.DNSServers {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetDnsServers(f6)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f8 := []*string{}
		for _, f8iter := range r.ko.Spec.SecurityGroupIDs {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		res.SetSecurityGroupIds(f8)
	}
	if r.ko.Spec.SelfServicePortal != nil {
		res.SetSelfServicePortal(*r.ko.Spec.SelfServicePortal)
	}
	if r.ko.Spec.ServerCertificateARN != nil {
		res.SetServerCertificateArn(*r.ko.Spec.ServerCertificateARN)
	}
	if r.ko.Spec.SplitTunnel != nil {
		res.SetSplitTunnel(*r.ko.Spec.SplitTunnel)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f12 := []*svcsdk.TagSpecification{}
		for _, f12iter := range r.ko.Spec.TagSpecifications {
			f12elem := &svcsdk.TagSpecification{}
			if f12iter.ResourceType != nil {
				f12elem.SetResourceType(*f12iter.ResourceType)
			}
			if f12iter.Tags != nil {
				f12elemf1 := []*svcsdk.Tag{}
				for _, f12elemf1iter := range f12iter.Tags {
					f12elemf1elem := &svcsdk.Tag{}
					if f12elemf1iter.Key != nil {
						f12elemf1elem.SetKey(*f12elemf1iter.Key)
					}
					if f12elemf1iter.Value != nil {
						f12elemf1elem.SetValue(*f12elemf1iter.Value)
					}
					f12elemf1 = append(f12elemf1, f12elemf1elem)
				}
				f12elem.SetTags(f12elemf1)
			}
			f12 = append(f12, f12elem)
		}
		res.SetTagSpecifications(f12)
	}
	if r.ko.Spec.TransportProtocol != nil {
		res.SetTransportProtocol(*r.ko.Spec.TransportProtocol)
	}
	if r.ko.Spec.VPCID != nil {
		res.SetVpcId(*r.ko.Spec.VPCID)
	}
	if r.ko.Spec.VPNPort != nil {
		res.SetVpnPort(*r.ko.Spec.VPNPort)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	_, respErr := rm.sdkapi.ModifyClientVpnEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyClientVpnEndpoint", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyClientVpnEndpointInput, error) {
	res := &svcsdk.ModifyClientVpnEndpointInput{}

	if r.ko.Spec.ClientConnectOptions != nil {
		f0 := &svcsdk.ClientConnectOptions{}
		if r.ko.Spec.ClientConnectOptions.Enabled != nil {
			f0.SetEnabled(*r.ko.Spec.ClientConnectOptions.Enabled)
		}
		if r.ko.Spec.ClientConnectOptions.LambdaFunctionARN != nil {
			f0.SetLambdaFunctionArn(*r.ko.Spec.ClientConnectOptions.LambdaFunctionARN)
		}
		res.SetClientConnectOptions(f0)
	}
	if r.ko.Status.ClientVPNEndpointID != nil {
		res.SetClientVpnEndpointId(*r.ko.Status.ClientVPNEndpointID)
	}
	if r.ko.Spec.ConnectionLogOptions != nil {
		f2 := &svcsdk.ConnectionLogOptions{}
		if r.ko.Spec.ConnectionLogOptions.CloudwatchLogGroup != nil {
			f2.SetCloudwatchLogGroup(*r.ko.Spec.ConnectionLogOptions.CloudwatchLogGroup)
		}
		if r.ko.Spec.ConnectionLogOptions.CloudwatchLogStream != nil {
			f2.SetCloudwatchLogStream(*r.ko.Spec.ConnectionLogOptions.CloudwatchLogStream)
		}
		if r.ko.Spec.ConnectionLogOptions.Enabled != nil {
			f2.SetEnabled(*r.ko.Spec.ConnectionLogOptions.Enabled)
		}
		res.SetConnectionLogOptions(f2)
	}
	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DNSServers != nil {
		f4 := &svcsdk.DnsServersOptionsModifyStructure{}
		if r.ko.Spec.DNSServers.CustomDNSServers != nil {
			f4f0 := []*string{}
			for _, f4f0iter := range r.ko.Spec.DNSServers.CustomDNSServers {
				var f4f0elem string
				f4f0elem = *f4f0iter
				f4f0 = append(f4f0, &f4f0elem)
			}
			f4.SetCustomDnsServers(f4f0)
		}
		if r.ko.Spec.DNSServers.Enabled != nil {
			f4.SetEnabled(*r.ko.Spec.DNSServers.Enabled)
		}
		res.SetDnsServers(f4)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f6 := []*string{}
		for _, f6iter := range r.ko.Spec.SecurityGroupIDs {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetSecurityGroupIds(f6)
	}
	if r.ko.Spec.SelfServicePortal != nil {
		res.SetSelfServicePortal(*r.ko.Spec.SelfServicePortal)
	}
	if r.ko.Spec.ServerCertificateARN != nil {
		res.SetServerCertificateArn(*r.ko.Spec.ServerCertificateARN)
	}
	if r.ko.Spec.SplitTunnel != nil {
		res.SetSplitTunnel(*r.ko.Spec.SplitTunnel)
	}
	if r.ko.Spec.VPCID != nil {
		res.SetVpcId(*r.ko.Spec.VPCID)
	}
	if r.ko.Spec.VPNPort != nil {
		res.SetVpnPort(*r.ko.Spec.VPNPort)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteClientVpnEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteClientVpnEndpoint", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteClientVpnEndpointInput, error) {
	res := &svcsdk.DeleteClientVpnEndpointInput{}

	if r.ko.Status.ClientVPNEndpointID != nil {
		res.SetClientVpnEndpointId(*r.ko.Status.ClientVPNEndpointID)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ClientVPNEndpoint,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
