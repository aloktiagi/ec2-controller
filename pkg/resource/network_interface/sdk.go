// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package network_interface

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.NetworkInterface{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeNetworkInterfacesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeNetworkInterfaces", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.NetworkInterfaces {
		if elem.Association != nil {
			f0 := &svcapitypes.NetworkInterfaceAssociation{}
			if elem.Association.AllocationId != nil {
				f0.AllocationID = elem.Association.AllocationId
			}
			if elem.Association.AssociationId != nil {
				f0.AssociationID = elem.Association.AssociationId
			}
			if elem.Association.CarrierIp != nil {
				f0.CarrierIP = elem.Association.CarrierIp
			}
			if elem.Association.CustomerOwnedIp != nil {
				f0.CustomerOwnedIP = elem.Association.CustomerOwnedIp
			}
			if elem.Association.IpOwnerId != nil {
				f0.IPOwnerID = elem.Association.IpOwnerId
			}
			if elem.Association.PublicDnsName != nil {
				f0.PublicDNSName = elem.Association.PublicDnsName
			}
			if elem.Association.PublicIp != nil {
				f0.PublicIP = elem.Association.PublicIp
			}
			ko.Status.Association = f0
		}
		if elem.Attachment != nil {
			f1 := &svcapitypes.NetworkInterfaceAttachment{}
			if elem.Attachment.AttachTime != nil {
				f1.AttachTime = &metav1.Time{*elem.Attachment.AttachTime}
			}
			if elem.Attachment.AttachmentId != nil {
				f1.AttachmentID = elem.Attachment.AttachmentId
			}
			if elem.Attachment.DeleteOnTermination != nil {
				f1.DeleteOnTermination = elem.Attachment.DeleteOnTermination
			}
			if elem.Attachment.DeviceIndex != nil {
				f1.DeviceIndex = elem.Attachment.DeviceIndex
			}
			if elem.Attachment.InstanceId != nil {
				f1.InstanceID = elem.Attachment.InstanceId
			}
			if elem.Attachment.InstanceOwnerId != nil {
				f1.InstanceOwnerID = elem.Attachment.InstanceOwnerId
			}
			if elem.Attachment.NetworkCardIndex != nil {
				f1.NetworkCardIndex = elem.Attachment.NetworkCardIndex
			}
			if elem.Attachment.Status != nil {
				f1.Status = elem.Attachment.Status
			}
			ko.Status.Attachment = f1
		}
		if elem.AvailabilityZone != nil {
			ko.Status.AvailabilityZone = elem.AvailabilityZone
		}
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		}
		if elem.Groups != nil {
			f4 := []*string{}
			for _, f4iter := range elem.Groups {
				var f4elem string
				f4 = append(f4, f4elem)
			}
			ko.Spec.Groups = f4
		}
		if elem.InterfaceType != nil {
			ko.Spec.InterfaceType = elem.InterfaceType
		}
		if elem.Ipv6Addresses != nil {
			f6 := []*svcapitypes.InstanceIPv6Address{}
			for _, f6iter := range elem.Ipv6Addresses {
				f6elem := &svcapitypes.InstanceIPv6Address{}
				if f6iter.Ipv6Address != nil {
					f6elem.IPv6Address = f6iter.Ipv6Address
				}
				f6 = append(f6, f6elem)
			}
			ko.Spec.IPv6Addresses = f6
		}
		if elem.MacAddress != nil {
			ko.Status.MacAddress = elem.MacAddress
		}
		if elem.NetworkInterfaceId != nil {
			ko.Status.NetworkInterfaceID = elem.NetworkInterfaceId
		}
		if elem.OutpostArn != nil {
			ko.Status.OutpostARN = elem.OutpostArn
		}
		if elem.OwnerId != nil {
			ko.Status.OwnerID = elem.OwnerId
		}
		if elem.PrivateDnsName != nil {
			ko.Status.PrivateDNSName = elem.PrivateDnsName
		}
		if elem.PrivateIpAddress != nil {
			ko.Spec.PrivateIPAddress = elem.PrivateIpAddress
		}
		if elem.PrivateIpAddresses != nil {
			f13 := []*svcapitypes.PrivateIPAddressSpecification{}
			for _, f13iter := range elem.PrivateIpAddresses {
				f13elem := &svcapitypes.PrivateIPAddressSpecification{}
				if f13iter.Primary != nil {
					f13elem.Primary = f13iter.Primary
				}
				if f13iter.PrivateIpAddress != nil {
					f13elem.PrivateIPAddress = f13iter.PrivateIpAddress
				}
				f13 = append(f13, f13elem)
			}
			ko.Spec.PrivateIPAddresses = f13
		}
		if elem.RequesterId != nil {
			ko.Status.RequesterID = elem.RequesterId
		}
		if elem.RequesterManaged != nil {
			ko.Status.RequesterManaged = elem.RequesterManaged
		}
		if elem.SourceDestCheck != nil {
			ko.Status.SourceDestCheck = elem.SourceDestCheck
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		}
		if elem.SubnetId != nil {
			ko.Spec.SubnetID = elem.SubnetId
		}
		if elem.TagSet != nil {
			f19 := []*svcapitypes.Tag{}
			for _, f19iter := range elem.TagSet {
				f19elem := &svcapitypes.Tag{}
				if f19iter.Key != nil {
					f19elem.Key = f19iter.Key
				}
				if f19iter.Value != nil {
					f19elem.Value = f19iter.Value
				}
				f19 = append(f19, f19elem)
			}
			ko.Status.TagSet = f19
		}
		if elem.VpcId != nil {
			ko.Status.VPCID = elem.VpcId
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeNetworkInterfacesInput, error) {
	res := &svcsdk.DescribeNetworkInterfacesInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateNetworkInterfaceWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateNetworkInterface", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.NetworkInterface.Association != nil {
		f0 := &svcapitypes.NetworkInterfaceAssociation{}
		if resp.NetworkInterface.Association.AllocationId != nil {
			f0.AllocationID = resp.NetworkInterface.Association.AllocationId
		}
		if resp.NetworkInterface.Association.AssociationId != nil {
			f0.AssociationID = resp.NetworkInterface.Association.AssociationId
		}
		if resp.NetworkInterface.Association.CarrierIp != nil {
			f0.CarrierIP = resp.NetworkInterface.Association.CarrierIp
		}
		if resp.NetworkInterface.Association.CustomerOwnedIp != nil {
			f0.CustomerOwnedIP = resp.NetworkInterface.Association.CustomerOwnedIp
		}
		if resp.NetworkInterface.Association.IpOwnerId != nil {
			f0.IPOwnerID = resp.NetworkInterface.Association.IpOwnerId
		}
		if resp.NetworkInterface.Association.PublicDnsName != nil {
			f0.PublicDNSName = resp.NetworkInterface.Association.PublicDnsName
		}
		if resp.NetworkInterface.Association.PublicIp != nil {
			f0.PublicIP = resp.NetworkInterface.Association.PublicIp
		}
		ko.Status.Association = f0
	}
	if resp.NetworkInterface.Attachment != nil {
		f1 := &svcapitypes.NetworkInterfaceAttachment{}
		if resp.NetworkInterface.Attachment.AttachTime != nil {
			f1.AttachTime = &metav1.Time{*resp.NetworkInterface.Attachment.AttachTime}
		}
		if resp.NetworkInterface.Attachment.AttachmentId != nil {
			f1.AttachmentID = resp.NetworkInterface.Attachment.AttachmentId
		}
		if resp.NetworkInterface.Attachment.DeleteOnTermination != nil {
			f1.DeleteOnTermination = resp.NetworkInterface.Attachment.DeleteOnTermination
		}
		if resp.NetworkInterface.Attachment.DeviceIndex != nil {
			f1.DeviceIndex = resp.NetworkInterface.Attachment.DeviceIndex
		}
		if resp.NetworkInterface.Attachment.InstanceId != nil {
			f1.InstanceID = resp.NetworkInterface.Attachment.InstanceId
		}
		if resp.NetworkInterface.Attachment.InstanceOwnerId != nil {
			f1.InstanceOwnerID = resp.NetworkInterface.Attachment.InstanceOwnerId
		}
		if resp.NetworkInterface.Attachment.NetworkCardIndex != nil {
			f1.NetworkCardIndex = resp.NetworkInterface.Attachment.NetworkCardIndex
		}
		if resp.NetworkInterface.Attachment.Status != nil {
			f1.Status = resp.NetworkInterface.Attachment.Status
		}
		ko.Status.Attachment = f1
	}
	if resp.NetworkInterface.AvailabilityZone != nil {
		ko.Status.AvailabilityZone = resp.NetworkInterface.AvailabilityZone
	}
	if resp.NetworkInterface.MacAddress != nil {
		ko.Status.MacAddress = resp.NetworkInterface.MacAddress
	}
	if resp.NetworkInterface.NetworkInterfaceId != nil {
		ko.Status.NetworkInterfaceID = resp.NetworkInterface.NetworkInterfaceId
	}
	if resp.NetworkInterface.OutpostArn != nil {
		ko.Status.OutpostARN = resp.NetworkInterface.OutpostArn
	}
	if resp.NetworkInterface.OwnerId != nil {
		ko.Status.OwnerID = resp.NetworkInterface.OwnerId
	}
	if resp.NetworkInterface.PrivateDnsName != nil {
		ko.Status.PrivateDNSName = resp.NetworkInterface.PrivateDnsName
	}
	if resp.NetworkInterface.RequesterId != nil {
		ko.Status.RequesterID = resp.NetworkInterface.RequesterId
	}
	if resp.NetworkInterface.RequesterManaged != nil {
		ko.Status.RequesterManaged = resp.NetworkInterface.RequesterManaged
	}
	if resp.NetworkInterface.SourceDestCheck != nil {
		ko.Status.SourceDestCheck = resp.NetworkInterface.SourceDestCheck
	}
	if resp.NetworkInterface.Status != nil {
		ko.Status.Status = resp.NetworkInterface.Status
	}
	if resp.NetworkInterface.TagSet != nil {
		f19 := []*svcapitypes.Tag{}
		for _, f19iter := range resp.NetworkInterface.TagSet {
			f19elem := &svcapitypes.Tag{}
			if f19iter.Key != nil {
				f19elem.Key = f19iter.Key
			}
			if f19iter.Value != nil {
				f19elem.Value = f19iter.Value
			}
			f19 = append(f19, f19elem)
		}
		ko.Status.TagSet = f19
	}
	if resp.NetworkInterface.VpcId != nil {
		ko.Status.VPCID = resp.NetworkInterface.VpcId
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateNetworkInterfaceInput, error) {
	res := &svcsdk.CreateNetworkInterfaceInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.Groups != nil {
		f2 := []*string{}
		for _, f2iter := range r.ko.Spec.Groups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetGroups(f2)
	}
	if r.ko.Spec.InterfaceType != nil {
		res.SetInterfaceType(*r.ko.Spec.InterfaceType)
	}
	if r.ko.Spec.IPv6AddressCount != nil {
		res.SetIpv6AddressCount(*r.ko.Spec.IPv6AddressCount)
	}
	if r.ko.Spec.IPv6Addresses != nil {
		f5 := []*svcsdk.InstanceIpv6Address{}
		for _, f5iter := range r.ko.Spec.IPv6Addresses {
			f5elem := &svcsdk.InstanceIpv6Address{}
			if f5iter.IPv6Address != nil {
				f5elem.SetIpv6Address(*f5iter.IPv6Address)
			}
			f5 = append(f5, f5elem)
		}
		res.SetIpv6Addresses(f5)
	}
	if r.ko.Spec.PrivateIPAddress != nil {
		res.SetPrivateIpAddress(*r.ko.Spec.PrivateIPAddress)
	}
	if r.ko.Spec.PrivateIPAddresses != nil {
		f7 := []*svcsdk.PrivateIpAddressSpecification{}
		for _, f7iter := range r.ko.Spec.PrivateIPAddresses {
			f7elem := &svcsdk.PrivateIpAddressSpecification{}
			if f7iter.Primary != nil {
				f7elem.SetPrimary(*f7iter.Primary)
			}
			if f7iter.PrivateIPAddress != nil {
				f7elem.SetPrivateIpAddress(*f7iter.PrivateIPAddress)
			}
			f7 = append(f7, f7elem)
		}
		res.SetPrivateIpAddresses(f7)
	}
	if r.ko.Spec.SecondaryPrivateIPAddressCount != nil {
		res.SetSecondaryPrivateIpAddressCount(*r.ko.Spec.SecondaryPrivateIPAddressCount)
	}
	if r.ko.Spec.SubnetID != nil {
		res.SetSubnetId(*r.ko.Spec.SubnetID)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f10 := []*svcsdk.TagSpecification{}
		for _, f10iter := range r.ko.Spec.TagSpecifications {
			f10elem := &svcsdk.TagSpecification{}
			if f10iter.ResourceType != nil {
				f10elem.SetResourceType(*f10iter.ResourceType)
			}
			if f10iter.Tags != nil {
				f10elemf1 := []*svcsdk.Tag{}
				for _, f10elemf1iter := range f10iter.Tags {
					f10elemf1elem := &svcsdk.Tag{}
					if f10elemf1iter.Key != nil {
						f10elemf1elem.SetKey(*f10elemf1iter.Key)
					}
					if f10elemf1iter.Value != nil {
						f10elemf1elem.SetValue(*f10elemf1iter.Value)
					}
					f10elemf1 = append(f10elemf1, f10elemf1elem)
				}
				f10elem.SetTags(f10elemf1)
			}
			f10 = append(f10, f10elem)
		}
		res.SetTagSpecifications(f10)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteNetworkInterfaceWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteNetworkInterface", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteNetworkInterfaceInput, error) {
	res := &svcsdk.DeleteNetworkInterfaceInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Status.NetworkInterfaceID != nil {
		res.SetNetworkInterfaceId(*r.ko.Status.NetworkInterfaceID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.NetworkInterface,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
