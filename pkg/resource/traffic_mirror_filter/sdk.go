// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package traffic_mirror_filter

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.TrafficMirrorFilter{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeTrafficMirrorFiltersWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeTrafficMirrorFilters", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.TrafficMirrorFilters {
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeTrafficMirrorFiltersInput, error) {
	res := &svcsdk.DescribeTrafficMirrorFiltersInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateTrafficMirrorFilterWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateTrafficMirrorFilter", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.TrafficMirrorFilter != nil {
		f1 := &svcapitypes.TrafficMirrorFilter_SDK{}
		if resp.TrafficMirrorFilter.Description != nil {
			f1.Description = resp.TrafficMirrorFilter.Description
		}
		if resp.TrafficMirrorFilter.EgressFilterRules != nil {
			f1f1 := []*svcapitypes.TrafficMirrorFilterRule_SDK{}
			for _, f1f1iter := range resp.TrafficMirrorFilter.EgressFilterRules {
				f1f1elem := &svcapitypes.TrafficMirrorFilterRule_SDK{}
				if f1f1iter.Description != nil {
					f1f1elem.Description = f1f1iter.Description
				}
				if f1f1iter.DestinationCidrBlock != nil {
					f1f1elem.DestinationCIDRBlock = f1f1iter.DestinationCidrBlock
				}
				if f1f1iter.DestinationPortRange != nil {
					f1f1elemf2 := &svcapitypes.TrafficMirrorPortRange{}
					if f1f1iter.DestinationPortRange.FromPort != nil {
						f1f1elemf2.FromPort = f1f1iter.DestinationPortRange.FromPort
					}
					if f1f1iter.DestinationPortRange.ToPort != nil {
						f1f1elemf2.ToPort = f1f1iter.DestinationPortRange.ToPort
					}
					f1f1elem.DestinationPortRange = f1f1elemf2
				}
				if f1f1iter.Protocol != nil {
					f1f1elem.Protocol = f1f1iter.Protocol
				}
				if f1f1iter.RuleAction != nil {
					f1f1elem.RuleAction = f1f1iter.RuleAction
				}
				if f1f1iter.RuleNumber != nil {
					f1f1elem.RuleNumber = f1f1iter.RuleNumber
				}
				if f1f1iter.SourceCidrBlock != nil {
					f1f1elem.SourceCIDRBlock = f1f1iter.SourceCidrBlock
				}
				if f1f1iter.SourcePortRange != nil {
					f1f1elemf7 := &svcapitypes.TrafficMirrorPortRange{}
					if f1f1iter.SourcePortRange.FromPort != nil {
						f1f1elemf7.FromPort = f1f1iter.SourcePortRange.FromPort
					}
					if f1f1iter.SourcePortRange.ToPort != nil {
						f1f1elemf7.ToPort = f1f1iter.SourcePortRange.ToPort
					}
					f1f1elem.SourcePortRange = f1f1elemf7
				}
				if f1f1iter.TrafficDirection != nil {
					f1f1elem.TrafficDirection = f1f1iter.TrafficDirection
				}
				if f1f1iter.TrafficMirrorFilterId != nil {
					f1f1elem.TrafficMirrorFilterID = f1f1iter.TrafficMirrorFilterId
				}
				if f1f1iter.TrafficMirrorFilterRuleId != nil {
					f1f1elem.TrafficMirrorFilterRuleID = f1f1iter.TrafficMirrorFilterRuleId
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.EgressFilterRules = f1f1
		}
		if resp.TrafficMirrorFilter.IngressFilterRules != nil {
			f1f2 := []*svcapitypes.TrafficMirrorFilterRule_SDK{}
			for _, f1f2iter := range resp.TrafficMirrorFilter.IngressFilterRules {
				f1f2elem := &svcapitypes.TrafficMirrorFilterRule_SDK{}
				if f1f2iter.Description != nil {
					f1f2elem.Description = f1f2iter.Description
				}
				if f1f2iter.DestinationCidrBlock != nil {
					f1f2elem.DestinationCIDRBlock = f1f2iter.DestinationCidrBlock
				}
				if f1f2iter.DestinationPortRange != nil {
					f1f2elemf2 := &svcapitypes.TrafficMirrorPortRange{}
					if f1f2iter.DestinationPortRange.FromPort != nil {
						f1f2elemf2.FromPort = f1f2iter.DestinationPortRange.FromPort
					}
					if f1f2iter.DestinationPortRange.ToPort != nil {
						f1f2elemf2.ToPort = f1f2iter.DestinationPortRange.ToPort
					}
					f1f2elem.DestinationPortRange = f1f2elemf2
				}
				if f1f2iter.Protocol != nil {
					f1f2elem.Protocol = f1f2iter.Protocol
				}
				if f1f2iter.RuleAction != nil {
					f1f2elem.RuleAction = f1f2iter.RuleAction
				}
				if f1f2iter.RuleNumber != nil {
					f1f2elem.RuleNumber = f1f2iter.RuleNumber
				}
				if f1f2iter.SourceCidrBlock != nil {
					f1f2elem.SourceCIDRBlock = f1f2iter.SourceCidrBlock
				}
				if f1f2iter.SourcePortRange != nil {
					f1f2elemf7 := &svcapitypes.TrafficMirrorPortRange{}
					if f1f2iter.SourcePortRange.FromPort != nil {
						f1f2elemf7.FromPort = f1f2iter.SourcePortRange.FromPort
					}
					if f1f2iter.SourcePortRange.ToPort != nil {
						f1f2elemf7.ToPort = f1f2iter.SourcePortRange.ToPort
					}
					f1f2elem.SourcePortRange = f1f2elemf7
				}
				if f1f2iter.TrafficDirection != nil {
					f1f2elem.TrafficDirection = f1f2iter.TrafficDirection
				}
				if f1f2iter.TrafficMirrorFilterId != nil {
					f1f2elem.TrafficMirrorFilterID = f1f2iter.TrafficMirrorFilterId
				}
				if f1f2iter.TrafficMirrorFilterRuleId != nil {
					f1f2elem.TrafficMirrorFilterRuleID = f1f2iter.TrafficMirrorFilterRuleId
				}
				f1f2 = append(f1f2, f1f2elem)
			}
			f1.IngressFilterRules = f1f2
		}
		if resp.TrafficMirrorFilter.NetworkServices != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range resp.TrafficMirrorFilter.NetworkServices {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.NetworkServices = f1f3
		}
		if resp.TrafficMirrorFilter.Tags != nil {
			f1f4 := []*svcapitypes.Tag{}
			for _, f1f4iter := range resp.TrafficMirrorFilter.Tags {
				f1f4elem := &svcapitypes.Tag{}
				if f1f4iter.Key != nil {
					f1f4elem.Key = f1f4iter.Key
				}
				if f1f4iter.Value != nil {
					f1f4elem.Value = f1f4iter.Value
				}
				f1f4 = append(f1f4, f1f4elem)
			}
			f1.Tags = f1f4
		}
		if resp.TrafficMirrorFilter.TrafficMirrorFilterId != nil {
			f1.TrafficMirrorFilterID = resp.TrafficMirrorFilter.TrafficMirrorFilterId
		}
		ko.Status.TrafficMirrorFilter = f1
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateTrafficMirrorFilterInput, error) {
	res := &svcsdk.CreateTrafficMirrorFilterInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f3 := []*svcsdk.TagSpecification{}
		for _, f3iter := range r.ko.Spec.TagSpecifications {
			f3elem := &svcsdk.TagSpecification{}
			if f3iter.ResourceType != nil {
				f3elem.SetResourceType(*f3iter.ResourceType)
			}
			if f3iter.Tags != nil {
				f3elemf1 := []*svcsdk.Tag{}
				for _, f3elemf1iter := range f3iter.Tags {
					f3elemf1elem := &svcsdk.Tag{}
					if f3elemf1iter.Key != nil {
						f3elemf1elem.SetKey(*f3elemf1iter.Key)
					}
					if f3elemf1iter.Value != nil {
						f3elemf1elem.SetValue(*f3elemf1iter.Value)
					}
					f3elemf1 = append(f3elemf1, f3elemf1elem)
				}
				f3elem.SetTags(f3elemf1)
			}
			f3 = append(f3, f3elem)
		}
		res.SetTagSpecifications(f3)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteTrafficMirrorFilterWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteTrafficMirrorFilter", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteTrafficMirrorFilterInput, error) {
	res := &svcsdk.DeleteTrafficMirrorFilterInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.TrafficMirrorFilter,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
