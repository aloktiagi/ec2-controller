// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package image

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.Image{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeImagesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeImages", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.Images {
		if elem.BlockDeviceMappings != nil {
			f1 := []*svcapitypes.BlockDeviceMapping{}
			for _, f1iter := range elem.BlockDeviceMappings {
				f1elem := &svcapitypes.BlockDeviceMapping{}
				if f1iter.DeviceName != nil {
					f1elem.DeviceName = f1iter.DeviceName
				}
				if f1iter.Ebs != nil {
					f1elemf1 := &svcapitypes.EBSBlockDevice{}
					if f1iter.Ebs.DeleteOnTermination != nil {
						f1elemf1.DeleteOnTermination = f1iter.Ebs.DeleteOnTermination
					}
					if f1iter.Ebs.Encrypted != nil {
						f1elemf1.Encrypted = f1iter.Ebs.Encrypted
					}
					if f1iter.Ebs.Iops != nil {
						f1elemf1.IOPS = f1iter.Ebs.Iops
					}
					if f1iter.Ebs.KmsKeyId != nil {
						f1elemf1.KMSKeyID = f1iter.Ebs.KmsKeyId
					}
					if f1iter.Ebs.OutpostArn != nil {
						f1elemf1.OutpostARN = f1iter.Ebs.OutpostArn
					}
					if f1iter.Ebs.SnapshotId != nil {
						f1elemf1.SnapshotID = f1iter.Ebs.SnapshotId
					}
					if f1iter.Ebs.Throughput != nil {
						f1elemf1.Throughput = f1iter.Ebs.Throughput
					}
					if f1iter.Ebs.VolumeSize != nil {
						f1elemf1.VolumeSize = f1iter.Ebs.VolumeSize
					}
					if f1iter.Ebs.VolumeType != nil {
						f1elemf1.VolumeType = f1iter.Ebs.VolumeType
					}
					f1elem.EBS = f1elemf1
				}
				if f1iter.NoDevice != nil {
					f1elem.NoDevice = f1iter.NoDevice
				}
				if f1iter.VirtualName != nil {
					f1elem.VirtualName = f1iter.VirtualName
				}
				f1 = append(f1, f1elem)
			}
			ko.Spec.BlockDeviceMappings = f1
		}
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		}
		if elem.ImageId != nil {
			ko.Status.ImageID = elem.ImageId
		}
		if elem.Name != nil {
			ko.Spec.Name = elem.Name
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeImagesInput, error) {
	res := &svcsdk.DescribeImagesInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateImageWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateImage", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.ImageId != nil {
		ko.Status.ImageID = resp.ImageId
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateImageInput, error) {
	res := &svcsdk.CreateImageInput{}

	if r.ko.Spec.BlockDeviceMappings != nil {
		f0 := []*svcsdk.BlockDeviceMapping{}
		for _, f0iter := range r.ko.Spec.BlockDeviceMappings {
			f0elem := &svcsdk.BlockDeviceMapping{}
			if f0iter.DeviceName != nil {
				f0elem.SetDeviceName(*f0iter.DeviceName)
			}
			if f0iter.EBS != nil {
				f0elemf1 := &svcsdk.EbsBlockDevice{}
				if f0iter.EBS.DeleteOnTermination != nil {
					f0elemf1.SetDeleteOnTermination(*f0iter.EBS.DeleteOnTermination)
				}
				if f0iter.EBS.Encrypted != nil {
					f0elemf1.SetEncrypted(*f0iter.EBS.Encrypted)
				}
				if f0iter.EBS.IOPS != nil {
					f0elemf1.SetIops(*f0iter.EBS.IOPS)
				}
				if f0iter.EBS.KMSKeyID != nil {
					f0elemf1.SetKmsKeyId(*f0iter.EBS.KMSKeyID)
				}
				if f0iter.EBS.OutpostARN != nil {
					f0elemf1.SetOutpostArn(*f0iter.EBS.OutpostARN)
				}
				if f0iter.EBS.SnapshotID != nil {
					f0elemf1.SetSnapshotId(*f0iter.EBS.SnapshotID)
				}
				if f0iter.EBS.Throughput != nil {
					f0elemf1.SetThroughput(*f0iter.EBS.Throughput)
				}
				if f0iter.EBS.VolumeSize != nil {
					f0elemf1.SetVolumeSize(*f0iter.EBS.VolumeSize)
				}
				if f0iter.EBS.VolumeType != nil {
					f0elemf1.SetVolumeType(*f0iter.EBS.VolumeType)
				}
				f0elem.SetEbs(f0elemf1)
			}
			if f0iter.NoDevice != nil {
				f0elem.SetNoDevice(*f0iter.NoDevice)
			}
			if f0iter.VirtualName != nil {
				f0elem.SetVirtualName(*f0iter.VirtualName)
			}
			f0 = append(f0, f0elem)
		}
		res.SetBlockDeviceMappings(f0)
	}
	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.InstanceID != nil {
		res.SetInstanceId(*r.ko.Spec.InstanceID)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.NoReboot != nil {
		res.SetNoReboot(*r.ko.Spec.NoReboot)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f6 := []*svcsdk.TagSpecification{}
		for _, f6iter := range r.ko.Spec.TagSpecifications {
			f6elem := &svcsdk.TagSpecification{}
			if f6iter.ResourceType != nil {
				f6elem.SetResourceType(*f6iter.ResourceType)
			}
			if f6iter.Tags != nil {
				f6elemf1 := []*svcsdk.Tag{}
				for _, f6elemf1iter := range f6iter.Tags {
					f6elemf1elem := &svcsdk.Tag{}
					if f6elemf1iter.Key != nil {
						f6elemf1elem.SetKey(*f6elemf1iter.Key)
					}
					if f6elemf1iter.Value != nil {
						f6elemf1elem.SetValue(*f6elemf1iter.Value)
					}
					f6elemf1 = append(f6elemf1, f6elemf1elem)
				}
				f6elem.SetTags(f6elemf1)
			}
			f6 = append(f6, f6elem)
		}
		res.SetTagSpecifications(f6)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Image,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
