// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package fleet

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.Fleet{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeFleetsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeFleets", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.Fleets {
		if elem.ClientToken != nil {
			ko.Spec.ClientToken = elem.ClientToken
		}
		if elem.Errors != nil {
			f3 := []*svcapitypes.CreateFleetError{}
			for _, f3iter := range elem.Errors {
				f3elem := &svcapitypes.CreateFleetError{}
				if f3iter.ErrorCode != nil {
					f3elem.ErrorCode = f3iter.ErrorCode
				}
				if f3iter.ErrorMessage != nil {
					f3elem.ErrorMessage = f3iter.ErrorMessage
				}
				if f3iter.LaunchTemplateAndOverrides != nil {
					f3elemf2 := &svcapitypes.LaunchTemplateAndOverridesResponse{}
					if f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification != nil {
						f3elemf2f0 := &svcapitypes.FleetLaunchTemplateSpecification{}
						if f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId != nil {
							f3elemf2f0.LaunchTemplateID = f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId
						}
						if f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName != nil {
							f3elemf2f0.LaunchTemplateName = f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName
						}
						if f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version != nil {
							f3elemf2f0.Version = f3iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version
						}
						f3elemf2.LaunchTemplateSpecification = f3elemf2f0
					}
					if f3iter.LaunchTemplateAndOverrides.Overrides != nil {
						f3elemf2f1 := &svcapitypes.FleetLaunchTemplateOverrides{}
						if f3iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone != nil {
							f3elemf2f1.AvailabilityZone = f3iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone
						}
						if f3iter.LaunchTemplateAndOverrides.Overrides.InstanceType != nil {
							f3elemf2f1.InstanceType = f3iter.LaunchTemplateAndOverrides.Overrides.InstanceType
						}
						if f3iter.LaunchTemplateAndOverrides.Overrides.MaxPrice != nil {
							f3elemf2f1.MaxPrice = f3iter.LaunchTemplateAndOverrides.Overrides.MaxPrice
						}
						if f3iter.LaunchTemplateAndOverrides.Overrides.Placement != nil {
							f3elemf2f1f3 := &svcapitypes.PlacementResponse{}
							if f3iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName != nil {
								f3elemf2f1f3.GroupName = f3iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName
							}
							f3elemf2f1.Placement = f3elemf2f1f3
						}
						if f3iter.LaunchTemplateAndOverrides.Overrides.Priority != nil {
							f3elemf2f1.Priority = f3iter.LaunchTemplateAndOverrides.Overrides.Priority
						}
						if f3iter.LaunchTemplateAndOverrides.Overrides.SubnetId != nil {
							f3elemf2f1.SubnetID = f3iter.LaunchTemplateAndOverrides.Overrides.SubnetId
						}
						if f3iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity != nil {
							f3elemf2f1.WeightedCapacity = f3iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity
						}
						f3elemf2.Overrides = f3elemf2f1
					}
					f3elem.LaunchTemplateAndOverrides = f3elemf2
				}
				if f3iter.Lifecycle != nil {
					f3elem.Lifecycle = f3iter.Lifecycle
				}
				f3 = append(f3, f3elem)
			}
			ko.Status.Errors = f3
		}
		if elem.ExcessCapacityTerminationPolicy != nil {
			ko.Spec.ExcessCapacityTerminationPolicy = elem.ExcessCapacityTerminationPolicy
		}
		if elem.FleetId != nil {
			ko.Status.FleetID = elem.FleetId
		}
		if elem.Instances != nil {
			f9 := []*svcapitypes.CreateFleetInstance{}
			for _, f9iter := range elem.Instances {
				f9elem := &svcapitypes.CreateFleetInstance{}
				if f9iter.InstanceIds != nil {
					f9elemf0 := []*string{}
					for _, f9elemf0iter := range f9iter.InstanceIds {
						var f9elemf0elem string
						f9elemf0elem = *f9elemf0iter
						f9elemf0 = append(f9elemf0, &f9elemf0elem)
					}
					f9elem.InstanceIDs = f9elemf0
				}
				if f9iter.InstanceType != nil {
					f9elem.InstanceType = f9iter.InstanceType
				}
				if f9iter.LaunchTemplateAndOverrides != nil {
					f9elemf2 := &svcapitypes.LaunchTemplateAndOverridesResponse{}
					if f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification != nil {
						f9elemf2f0 := &svcapitypes.FleetLaunchTemplateSpecification{}
						if f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId != nil {
							f9elemf2f0.LaunchTemplateID = f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId
						}
						if f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName != nil {
							f9elemf2f0.LaunchTemplateName = f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName
						}
						if f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version != nil {
							f9elemf2f0.Version = f9iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version
						}
						f9elemf2.LaunchTemplateSpecification = f9elemf2f0
					}
					if f9iter.LaunchTemplateAndOverrides.Overrides != nil {
						f9elemf2f1 := &svcapitypes.FleetLaunchTemplateOverrides{}
						if f9iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone != nil {
							f9elemf2f1.AvailabilityZone = f9iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone
						}
						if f9iter.LaunchTemplateAndOverrides.Overrides.InstanceType != nil {
							f9elemf2f1.InstanceType = f9iter.LaunchTemplateAndOverrides.Overrides.InstanceType
						}
						if f9iter.LaunchTemplateAndOverrides.Overrides.MaxPrice != nil {
							f9elemf2f1.MaxPrice = f9iter.LaunchTemplateAndOverrides.Overrides.MaxPrice
						}
						if f9iter.LaunchTemplateAndOverrides.Overrides.Placement != nil {
							f9elemf2f1f3 := &svcapitypes.PlacementResponse{}
							if f9iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName != nil {
								f9elemf2f1f3.GroupName = f9iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName
							}
							f9elemf2f1.Placement = f9elemf2f1f3
						}
						if f9iter.LaunchTemplateAndOverrides.Overrides.Priority != nil {
							f9elemf2f1.Priority = f9iter.LaunchTemplateAndOverrides.Overrides.Priority
						}
						if f9iter.LaunchTemplateAndOverrides.Overrides.SubnetId != nil {
							f9elemf2f1.SubnetID = f9iter.LaunchTemplateAndOverrides.Overrides.SubnetId
						}
						if f9iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity != nil {
							f9elemf2f1.WeightedCapacity = f9iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity
						}
						f9elemf2.Overrides = f9elemf2f1
					}
					f9elem.LaunchTemplateAndOverrides = f9elemf2
				}
				if f9iter.Lifecycle != nil {
					f9elem.Lifecycle = f9iter.Lifecycle
				}
				if f9iter.Platform != nil {
					f9elem.Platform = f9iter.Platform
				}
				f9 = append(f9, f9elem)
			}
			ko.Status.Instances = f9
		}
		if elem.LaunchTemplateConfigs != nil {
			f10 := []*svcapitypes.FleetLaunchTemplateConfigRequest{}
			for _, f10iter := range elem.LaunchTemplateConfigs {
				f10elem := &svcapitypes.FleetLaunchTemplateConfigRequest{}
				if f10iter.LaunchTemplateSpecification != nil {
					f10elemf0 := &svcapitypes.FleetLaunchTemplateSpecificationRequest{}
					if f10iter.LaunchTemplateSpecification.LaunchTemplateId != nil {
						f10elemf0.LaunchTemplateID = f10iter.LaunchTemplateSpecification.LaunchTemplateId
					}
					if f10iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
						f10elemf0.LaunchTemplateName = f10iter.LaunchTemplateSpecification.LaunchTemplateName
					}
					if f10iter.LaunchTemplateSpecification.Version != nil {
						f10elemf0.Version = f10iter.LaunchTemplateSpecification.Version
					}
					f10elem.LaunchTemplateSpecification = f10elemf0
				}
				if f10iter.Overrides != nil {
					f10elemf1 := []*svcapitypes.FleetLaunchTemplateOverridesRequest{}
					for _, f10elemf1iter := range f10iter.Overrides {
						f10elemf1elem := &svcapitypes.FleetLaunchTemplateOverridesRequest{}
						if f10elemf1iter.AvailabilityZone != nil {
							f10elemf1elem.AvailabilityZone = f10elemf1iter.AvailabilityZone
						}
						if f10elemf1iter.InstanceType != nil {
							f10elemf1elem.InstanceType = f10elemf1iter.InstanceType
						}
						if f10elemf1iter.MaxPrice != nil {
							f10elemf1elem.MaxPrice = f10elemf1iter.MaxPrice
						}
						if f10elemf1iter.Placement != nil {
							f10elemf1elemf3 := &svcapitypes.Placement{}
							if f10elemf1iter.Placement.GroupName != nil {
								f10elemf1elemf3.GroupName = f10elemf1iter.Placement.GroupName
							}
							f10elemf1elem.Placement = f10elemf1elemf3
						}
						if f10elemf1iter.Priority != nil {
							f10elemf1elem.Priority = f10elemf1iter.Priority
						}
						if f10elemf1iter.SubnetId != nil {
							f10elemf1elem.SubnetID = f10elemf1iter.SubnetId
						}
						if f10elemf1iter.WeightedCapacity != nil {
							f10elemf1elem.WeightedCapacity = f10elemf1iter.WeightedCapacity
						}
						f10elemf1 = append(f10elemf1, f10elemf1elem)
					}
					f10elem.Overrides = f10elemf1
				}
				f10 = append(f10, f10elem)
			}
			ko.Spec.LaunchTemplateConfigs = f10
		}
		if elem.OnDemandOptions != nil {
			f11 := &svcapitypes.OnDemandOptionsRequest{}
			if elem.OnDemandOptions.AllocationStrategy != nil {
				f11.AllocationStrategy = elem.OnDemandOptions.AllocationStrategy
			}
			if elem.OnDemandOptions.CapacityReservationOptions != nil {
				f11f1 := &svcapitypes.CapacityReservationOptionsRequest{}
				if elem.OnDemandOptions.CapacityReservationOptions.UsageStrategy != nil {
					f11f1.UsageStrategy = elem.OnDemandOptions.CapacityReservationOptions.UsageStrategy
				}
				f11.CapacityReservationOptions = f11f1
			}
			if elem.OnDemandOptions.MaxTotalPrice != nil {
				f11.MaxTotalPrice = elem.OnDemandOptions.MaxTotalPrice
			}
			if elem.OnDemandOptions.MinTargetCapacity != nil {
				f11.MinTargetCapacity = elem.OnDemandOptions.MinTargetCapacity
			}
			if elem.OnDemandOptions.SingleAvailabilityZone != nil {
				f11.SingleAvailabilityZone = elem.OnDemandOptions.SingleAvailabilityZone
			}
			if elem.OnDemandOptions.SingleInstanceType != nil {
				f11.SingleInstanceType = elem.OnDemandOptions.SingleInstanceType
			}
			ko.Spec.OnDemandOptions = f11
		}
		if elem.ReplaceUnhealthyInstances != nil {
			ko.Spec.ReplaceUnhealthyInstances = elem.ReplaceUnhealthyInstances
		}
		if elem.SpotOptions != nil {
			f13 := &svcapitypes.SpotOptionsRequest{}
			if elem.SpotOptions.AllocationStrategy != nil {
				f13.AllocationStrategy = elem.SpotOptions.AllocationStrategy
			}
			if elem.SpotOptions.InstanceInterruptionBehavior != nil {
				f13.InstanceInterruptionBehavior = elem.SpotOptions.InstanceInterruptionBehavior
			}
			if elem.SpotOptions.InstancePoolsToUseCount != nil {
				f13.InstancePoolsToUseCount = elem.SpotOptions.InstancePoolsToUseCount
			}
			if elem.SpotOptions.MaintenanceStrategies != nil {
				f13f3 := &svcapitypes.FleetSpotMaintenanceStrategiesRequest{}
				if elem.SpotOptions.MaintenanceStrategies.CapacityRebalance != nil {
					f13f3f0 := &svcapitypes.FleetSpotCapacityRebalanceRequest{}
					if elem.SpotOptions.MaintenanceStrategies.CapacityRebalance.ReplacementStrategy != nil {
						f13f3f0.ReplacementStrategy = elem.SpotOptions.MaintenanceStrategies.CapacityRebalance.ReplacementStrategy
					}
					f13f3.CapacityRebalance = f13f3f0
				}
				f13.MaintenanceStrategies = f13f3
			}
			if elem.SpotOptions.MaxTotalPrice != nil {
				f13.MaxTotalPrice = elem.SpotOptions.MaxTotalPrice
			}
			if elem.SpotOptions.MinTargetCapacity != nil {
				f13.MinTargetCapacity = elem.SpotOptions.MinTargetCapacity
			}
			if elem.SpotOptions.SingleAvailabilityZone != nil {
				f13.SingleAvailabilityZone = elem.SpotOptions.SingleAvailabilityZone
			}
			if elem.SpotOptions.SingleInstanceType != nil {
				f13.SingleInstanceType = elem.SpotOptions.SingleInstanceType
			}
			ko.Spec.SpotOptions = f13
		}
		if elem.TargetCapacitySpecification != nil {
			f15 := &svcapitypes.TargetCapacitySpecificationRequest{}
			if elem.TargetCapacitySpecification.DefaultTargetCapacityType != nil {
				f15.DefaultTargetCapacityType = elem.TargetCapacitySpecification.DefaultTargetCapacityType
			}
			if elem.TargetCapacitySpecification.OnDemandTargetCapacity != nil {
				f15.OnDemandTargetCapacity = elem.TargetCapacitySpecification.OnDemandTargetCapacity
			}
			if elem.TargetCapacitySpecification.SpotTargetCapacity != nil {
				f15.SpotTargetCapacity = elem.TargetCapacitySpecification.SpotTargetCapacity
			}
			if elem.TargetCapacitySpecification.TotalTargetCapacity != nil {
				f15.TotalTargetCapacity = elem.TargetCapacitySpecification.TotalTargetCapacity
			}
			ko.Spec.TargetCapacitySpecification = f15
		}
		if elem.TerminateInstancesWithExpiration != nil {
			ko.Spec.TerminateInstancesWithExpiration = elem.TerminateInstancesWithExpiration
		}
		if elem.Type != nil {
			ko.Spec.Type = elem.Type
		}
		if elem.ValidFrom != nil {
			ko.Spec.ValidFrom = &metav1.Time{*elem.ValidFrom}
		}
		if elem.ValidUntil != nil {
			ko.Spec.ValidUntil = &metav1.Time{*elem.ValidUntil}
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeFleetsInput, error) {
	res := &svcsdk.DescribeFleetsInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateFleetWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateFleet", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Errors != nil {
		f0 := []*svcapitypes.CreateFleetError{}
		for _, f0iter := range resp.Errors {
			f0elem := &svcapitypes.CreateFleetError{}
			if f0iter.ErrorCode != nil {
				f0elem.ErrorCode = f0iter.ErrorCode
			}
			if f0iter.ErrorMessage != nil {
				f0elem.ErrorMessage = f0iter.ErrorMessage
			}
			if f0iter.LaunchTemplateAndOverrides != nil {
				f0elemf2 := &svcapitypes.LaunchTemplateAndOverridesResponse{}
				if f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification != nil {
					f0elemf2f0 := &svcapitypes.FleetLaunchTemplateSpecification{}
					if f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId != nil {
						f0elemf2f0.LaunchTemplateID = f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId
					}
					if f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName != nil {
						f0elemf2f0.LaunchTemplateName = f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName
					}
					if f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version != nil {
						f0elemf2f0.Version = f0iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version
					}
					f0elemf2.LaunchTemplateSpecification = f0elemf2f0
				}
				if f0iter.LaunchTemplateAndOverrides.Overrides != nil {
					f0elemf2f1 := &svcapitypes.FleetLaunchTemplateOverrides{}
					if f0iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone != nil {
						f0elemf2f1.AvailabilityZone = f0iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone
					}
					if f0iter.LaunchTemplateAndOverrides.Overrides.InstanceType != nil {
						f0elemf2f1.InstanceType = f0iter.LaunchTemplateAndOverrides.Overrides.InstanceType
					}
					if f0iter.LaunchTemplateAndOverrides.Overrides.MaxPrice != nil {
						f0elemf2f1.MaxPrice = f0iter.LaunchTemplateAndOverrides.Overrides.MaxPrice
					}
					if f0iter.LaunchTemplateAndOverrides.Overrides.Placement != nil {
						f0elemf2f1f3 := &svcapitypes.PlacementResponse{}
						if f0iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName != nil {
							f0elemf2f1f3.GroupName = f0iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName
						}
						f0elemf2f1.Placement = f0elemf2f1f3
					}
					if f0iter.LaunchTemplateAndOverrides.Overrides.Priority != nil {
						f0elemf2f1.Priority = f0iter.LaunchTemplateAndOverrides.Overrides.Priority
					}
					if f0iter.LaunchTemplateAndOverrides.Overrides.SubnetId != nil {
						f0elemf2f1.SubnetID = f0iter.LaunchTemplateAndOverrides.Overrides.SubnetId
					}
					if f0iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity != nil {
						f0elemf2f1.WeightedCapacity = f0iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity
					}
					f0elemf2.Overrides = f0elemf2f1
				}
				f0elem.LaunchTemplateAndOverrides = f0elemf2
			}
			if f0iter.Lifecycle != nil {
				f0elem.Lifecycle = f0iter.Lifecycle
			}
			f0 = append(f0, f0elem)
		}
		ko.Status.Errors = f0
	}
	if resp.FleetId != nil {
		ko.Status.FleetID = resp.FleetId
	}
	if resp.Instances != nil {
		f2 := []*svcapitypes.CreateFleetInstance{}
		for _, f2iter := range resp.Instances {
			f2elem := &svcapitypes.CreateFleetInstance{}
			if f2iter.InstanceIds != nil {
				f2elemf0 := []*string{}
				for _, f2elemf0iter := range f2iter.InstanceIds {
					var f2elemf0elem string
					f2elemf0elem = *f2elemf0iter
					f2elemf0 = append(f2elemf0, &f2elemf0elem)
				}
				f2elem.InstanceIDs = f2elemf0
			}
			if f2iter.InstanceType != nil {
				f2elem.InstanceType = f2iter.InstanceType
			}
			if f2iter.LaunchTemplateAndOverrides != nil {
				f2elemf2 := &svcapitypes.LaunchTemplateAndOverridesResponse{}
				if f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification != nil {
					f2elemf2f0 := &svcapitypes.FleetLaunchTemplateSpecification{}
					if f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId != nil {
						f2elemf2f0.LaunchTemplateID = f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateId
					}
					if f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName != nil {
						f2elemf2f0.LaunchTemplateName = f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.LaunchTemplateName
					}
					if f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version != nil {
						f2elemf2f0.Version = f2iter.LaunchTemplateAndOverrides.LaunchTemplateSpecification.Version
					}
					f2elemf2.LaunchTemplateSpecification = f2elemf2f0
				}
				if f2iter.LaunchTemplateAndOverrides.Overrides != nil {
					f2elemf2f1 := &svcapitypes.FleetLaunchTemplateOverrides{}
					if f2iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone != nil {
						f2elemf2f1.AvailabilityZone = f2iter.LaunchTemplateAndOverrides.Overrides.AvailabilityZone
					}
					if f2iter.LaunchTemplateAndOverrides.Overrides.InstanceType != nil {
						f2elemf2f1.InstanceType = f2iter.LaunchTemplateAndOverrides.Overrides.InstanceType
					}
					if f2iter.LaunchTemplateAndOverrides.Overrides.MaxPrice != nil {
						f2elemf2f1.MaxPrice = f2iter.LaunchTemplateAndOverrides.Overrides.MaxPrice
					}
					if f2iter.LaunchTemplateAndOverrides.Overrides.Placement != nil {
						f2elemf2f1f3 := &svcapitypes.PlacementResponse{}
						if f2iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName != nil {
							f2elemf2f1f3.GroupName = f2iter.LaunchTemplateAndOverrides.Overrides.Placement.GroupName
						}
						f2elemf2f1.Placement = f2elemf2f1f3
					}
					if f2iter.LaunchTemplateAndOverrides.Overrides.Priority != nil {
						f2elemf2f1.Priority = f2iter.LaunchTemplateAndOverrides.Overrides.Priority
					}
					if f2iter.LaunchTemplateAndOverrides.Overrides.SubnetId != nil {
						f2elemf2f1.SubnetID = f2iter.LaunchTemplateAndOverrides.Overrides.SubnetId
					}
					if f2iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity != nil {
						f2elemf2f1.WeightedCapacity = f2iter.LaunchTemplateAndOverrides.Overrides.WeightedCapacity
					}
					f2elemf2.Overrides = f2elemf2f1
				}
				f2elem.LaunchTemplateAndOverrides = f2elemf2
			}
			if f2iter.Lifecycle != nil {
				f2elem.Lifecycle = f2iter.Lifecycle
			}
			if f2iter.Platform != nil {
				f2elem.Platform = f2iter.Platform
			}
			f2 = append(f2, f2elem)
		}
		ko.Status.Instances = f2
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateFleetInput, error) {
	res := &svcsdk.CreateFleetInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.ExcessCapacityTerminationPolicy != nil {
		res.SetExcessCapacityTerminationPolicy(*r.ko.Spec.ExcessCapacityTerminationPolicy)
	}
	if r.ko.Spec.LaunchTemplateConfigs != nil {
		f3 := []*svcsdk.FleetLaunchTemplateConfigRequest{}
		for _, f3iter := range r.ko.Spec.LaunchTemplateConfigs {
			f3elem := &svcsdk.FleetLaunchTemplateConfigRequest{}
			if f3iter.LaunchTemplateSpecification != nil {
				f3elemf0 := &svcsdk.FleetLaunchTemplateSpecificationRequest{}
				if f3iter.LaunchTemplateSpecification.LaunchTemplateID != nil {
					f3elemf0.SetLaunchTemplateId(*f3iter.LaunchTemplateSpecification.LaunchTemplateID)
				}
				if f3iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
					f3elemf0.SetLaunchTemplateName(*f3iter.LaunchTemplateSpecification.LaunchTemplateName)
				}
				if f3iter.LaunchTemplateSpecification.Version != nil {
					f3elemf0.SetVersion(*f3iter.LaunchTemplateSpecification.Version)
				}
				f3elem.SetLaunchTemplateSpecification(f3elemf0)
			}
			if f3iter.Overrides != nil {
				f3elemf1 := []*svcsdk.FleetLaunchTemplateOverridesRequest{}
				for _, f3elemf1iter := range f3iter.Overrides {
					f3elemf1elem := &svcsdk.FleetLaunchTemplateOverridesRequest{}
					if f3elemf1iter.AvailabilityZone != nil {
						f3elemf1elem.SetAvailabilityZone(*f3elemf1iter.AvailabilityZone)
					}
					if f3elemf1iter.InstanceType != nil {
						f3elemf1elem.SetInstanceType(*f3elemf1iter.InstanceType)
					}
					if f3elemf1iter.MaxPrice != nil {
						f3elemf1elem.SetMaxPrice(*f3elemf1iter.MaxPrice)
					}
					if f3elemf1iter.Placement != nil {
						f3elemf1elemf3 := &svcsdk.Placement{}
						if f3elemf1iter.Placement.Affinity != nil {
							f3elemf1elemf3.SetAffinity(*f3elemf1iter.Placement.Affinity)
						}
						if f3elemf1iter.Placement.AvailabilityZone != nil {
							f3elemf1elemf3.SetAvailabilityZone(*f3elemf1iter.Placement.AvailabilityZone)
						}
						if f3elemf1iter.Placement.GroupName != nil {
							f3elemf1elemf3.SetGroupName(*f3elemf1iter.Placement.GroupName)
						}
						if f3elemf1iter.Placement.HostID != nil {
							f3elemf1elemf3.SetHostId(*f3elemf1iter.Placement.HostID)
						}
						if f3elemf1iter.Placement.HostResourceGroupARN != nil {
							f3elemf1elemf3.SetHostResourceGroupArn(*f3elemf1iter.Placement.HostResourceGroupARN)
						}
						if f3elemf1iter.Placement.PartitionNumber != nil {
							f3elemf1elemf3.SetPartitionNumber(*f3elemf1iter.Placement.PartitionNumber)
						}
						if f3elemf1iter.Placement.SpreadDomain != nil {
							f3elemf1elemf3.SetSpreadDomain(*f3elemf1iter.Placement.SpreadDomain)
						}
						if f3elemf1iter.Placement.Tenancy != nil {
							f3elemf1elemf3.SetTenancy(*f3elemf1iter.Placement.Tenancy)
						}
						f3elemf1elem.SetPlacement(f3elemf1elemf3)
					}
					if f3elemf1iter.Priority != nil {
						f3elemf1elem.SetPriority(*f3elemf1iter.Priority)
					}
					if f3elemf1iter.SubnetID != nil {
						f3elemf1elem.SetSubnetId(*f3elemf1iter.SubnetID)
					}
					if f3elemf1iter.WeightedCapacity != nil {
						f3elemf1elem.SetWeightedCapacity(*f3elemf1iter.WeightedCapacity)
					}
					f3elemf1 = append(f3elemf1, f3elemf1elem)
				}
				f3elem.SetOverrides(f3elemf1)
			}
			f3 = append(f3, f3elem)
		}
		res.SetLaunchTemplateConfigs(f3)
	}
	if r.ko.Spec.OnDemandOptions != nil {
		f4 := &svcsdk.OnDemandOptionsRequest{}
		if r.ko.Spec.OnDemandOptions.AllocationStrategy != nil {
			f4.SetAllocationStrategy(*r.ko.Spec.OnDemandOptions.AllocationStrategy)
		}
		if r.ko.Spec.OnDemandOptions.CapacityReservationOptions != nil {
			f4f1 := &svcsdk.CapacityReservationOptionsRequest{}
			if r.ko.Spec.OnDemandOptions.CapacityReservationOptions.UsageStrategy != nil {
				f4f1.SetUsageStrategy(*r.ko.Spec.OnDemandOptions.CapacityReservationOptions.UsageStrategy)
			}
			f4.SetCapacityReservationOptions(f4f1)
		}
		if r.ko.Spec.OnDemandOptions.MaxTotalPrice != nil {
			f4.SetMaxTotalPrice(*r.ko.Spec.OnDemandOptions.MaxTotalPrice)
		}
		if r.ko.Spec.OnDemandOptions.MinTargetCapacity != nil {
			f4.SetMinTargetCapacity(*r.ko.Spec.OnDemandOptions.MinTargetCapacity)
		}
		if r.ko.Spec.OnDemandOptions.SingleAvailabilityZone != nil {
			f4.SetSingleAvailabilityZone(*r.ko.Spec.OnDemandOptions.SingleAvailabilityZone)
		}
		if r.ko.Spec.OnDemandOptions.SingleInstanceType != nil {
			f4.SetSingleInstanceType(*r.ko.Spec.OnDemandOptions.SingleInstanceType)
		}
		res.SetOnDemandOptions(f4)
	}
	if r.ko.Spec.ReplaceUnhealthyInstances != nil {
		res.SetReplaceUnhealthyInstances(*r.ko.Spec.ReplaceUnhealthyInstances)
	}
	if r.ko.Spec.SpotOptions != nil {
		f6 := &svcsdk.SpotOptionsRequest{}
		if r.ko.Spec.SpotOptions.AllocationStrategy != nil {
			f6.SetAllocationStrategy(*r.ko.Spec.SpotOptions.AllocationStrategy)
		}
		if r.ko.Spec.SpotOptions.InstanceInterruptionBehavior != nil {
			f6.SetInstanceInterruptionBehavior(*r.ko.Spec.SpotOptions.InstanceInterruptionBehavior)
		}
		if r.ko.Spec.SpotOptions.InstancePoolsToUseCount != nil {
			f6.SetInstancePoolsToUseCount(*r.ko.Spec.SpotOptions.InstancePoolsToUseCount)
		}
		if r.ko.Spec.SpotOptions.MaintenanceStrategies != nil {
			f6f3 := &svcsdk.FleetSpotMaintenanceStrategiesRequest{}
			if r.ko.Spec.SpotOptions.MaintenanceStrategies.CapacityRebalance != nil {
				f6f3f0 := &svcsdk.FleetSpotCapacityRebalanceRequest{}
				if r.ko.Spec.SpotOptions.MaintenanceStrategies.CapacityRebalance.ReplacementStrategy != nil {
					f6f3f0.SetReplacementStrategy(*r.ko.Spec.SpotOptions.MaintenanceStrategies.CapacityRebalance.ReplacementStrategy)
				}
				f6f3.SetCapacityRebalance(f6f3f0)
			}
			f6.SetMaintenanceStrategies(f6f3)
		}
		if r.ko.Spec.SpotOptions.MaxTotalPrice != nil {
			f6.SetMaxTotalPrice(*r.ko.Spec.SpotOptions.MaxTotalPrice)
		}
		if r.ko.Spec.SpotOptions.MinTargetCapacity != nil {
			f6.SetMinTargetCapacity(*r.ko.Spec.SpotOptions.MinTargetCapacity)
		}
		if r.ko.Spec.SpotOptions.SingleAvailabilityZone != nil {
			f6.SetSingleAvailabilityZone(*r.ko.Spec.SpotOptions.SingleAvailabilityZone)
		}
		if r.ko.Spec.SpotOptions.SingleInstanceType != nil {
			f6.SetSingleInstanceType(*r.ko.Spec.SpotOptions.SingleInstanceType)
		}
		res.SetSpotOptions(f6)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f7 := []*svcsdk.TagSpecification{}
		for _, f7iter := range r.ko.Spec.TagSpecifications {
			f7elem := &svcsdk.TagSpecification{}
			if f7iter.ResourceType != nil {
				f7elem.SetResourceType(*f7iter.ResourceType)
			}
			if f7iter.Tags != nil {
				f7elemf1 := []*svcsdk.Tag{}
				for _, f7elemf1iter := range f7iter.Tags {
					f7elemf1elem := &svcsdk.Tag{}
					if f7elemf1iter.Key != nil {
						f7elemf1elem.SetKey(*f7elemf1iter.Key)
					}
					if f7elemf1iter.Value != nil {
						f7elemf1elem.SetValue(*f7elemf1iter.Value)
					}
					f7elemf1 = append(f7elemf1, f7elemf1elem)
				}
				f7elem.SetTags(f7elemf1)
			}
			f7 = append(f7, f7elem)
		}
		res.SetTagSpecifications(f7)
	}
	if r.ko.Spec.TargetCapacitySpecification != nil {
		f8 := &svcsdk.TargetCapacitySpecificationRequest{}
		if r.ko.Spec.TargetCapacitySpecification.DefaultTargetCapacityType != nil {
			f8.SetDefaultTargetCapacityType(*r.ko.Spec.TargetCapacitySpecification.DefaultTargetCapacityType)
		}
		if r.ko.Spec.TargetCapacitySpecification.OnDemandTargetCapacity != nil {
			f8.SetOnDemandTargetCapacity(*r.ko.Spec.TargetCapacitySpecification.OnDemandTargetCapacity)
		}
		if r.ko.Spec.TargetCapacitySpecification.SpotTargetCapacity != nil {
			f8.SetSpotTargetCapacity(*r.ko.Spec.TargetCapacitySpecification.SpotTargetCapacity)
		}
		if r.ko.Spec.TargetCapacitySpecification.TotalTargetCapacity != nil {
			f8.SetTotalTargetCapacity(*r.ko.Spec.TargetCapacitySpecification.TotalTargetCapacity)
		}
		res.SetTargetCapacitySpecification(f8)
	}
	if r.ko.Spec.TerminateInstancesWithExpiration != nil {
		res.SetTerminateInstancesWithExpiration(*r.ko.Spec.TerminateInstancesWithExpiration)
	}
	if r.ko.Spec.Type != nil {
		res.SetType(*r.ko.Spec.Type)
	}
	if r.ko.Spec.ValidFrom != nil {
		res.SetValidFrom(r.ko.Spec.ValidFrom.Time)
	}
	if r.ko.Spec.ValidUntil != nil {
		res.SetValidUntil(r.ko.Spec.ValidUntil.Time)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	_, respErr := rm.sdkapi.ModifyFleetWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyFleet", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyFleetInput, error) {
	res := &svcsdk.ModifyFleetInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.ExcessCapacityTerminationPolicy != nil {
		res.SetExcessCapacityTerminationPolicy(*r.ko.Spec.ExcessCapacityTerminationPolicy)
	}
	if r.ko.Status.FleetID != nil {
		res.SetFleetId(*r.ko.Status.FleetID)
	}
	if r.ko.Spec.LaunchTemplateConfigs != nil {
		f3 := []*svcsdk.FleetLaunchTemplateConfigRequest{}
		for _, f3iter := range r.ko.Spec.LaunchTemplateConfigs {
			f3elem := &svcsdk.FleetLaunchTemplateConfigRequest{}
			if f3iter.LaunchTemplateSpecification != nil {
				f3elemf0 := &svcsdk.FleetLaunchTemplateSpecificationRequest{}
				if f3iter.LaunchTemplateSpecification.LaunchTemplateID != nil {
					f3elemf0.SetLaunchTemplateId(*f3iter.LaunchTemplateSpecification.LaunchTemplateID)
				}
				if f3iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
					f3elemf0.SetLaunchTemplateName(*f3iter.LaunchTemplateSpecification.LaunchTemplateName)
				}
				if f3iter.LaunchTemplateSpecification.Version != nil {
					f3elemf0.SetVersion(*f3iter.LaunchTemplateSpecification.Version)
				}
				f3elem.SetLaunchTemplateSpecification(f3elemf0)
			}
			if f3iter.Overrides != nil {
				f3elemf1 := []*svcsdk.FleetLaunchTemplateOverridesRequest{}
				for _, f3elemf1iter := range f3iter.Overrides {
					f3elemf1elem := &svcsdk.FleetLaunchTemplateOverridesRequest{}
					if f3elemf1iter.AvailabilityZone != nil {
						f3elemf1elem.SetAvailabilityZone(*f3elemf1iter.AvailabilityZone)
					}
					if f3elemf1iter.InstanceType != nil {
						f3elemf1elem.SetInstanceType(*f3elemf1iter.InstanceType)
					}
					if f3elemf1iter.MaxPrice != nil {
						f3elemf1elem.SetMaxPrice(*f3elemf1iter.MaxPrice)
					}
					if f3elemf1iter.Placement != nil {
						f3elemf1elemf3 := &svcsdk.Placement{}
						if f3elemf1iter.Placement.Affinity != nil {
							f3elemf1elemf3.SetAffinity(*f3elemf1iter.Placement.Affinity)
						}
						if f3elemf1iter.Placement.AvailabilityZone != nil {
							f3elemf1elemf3.SetAvailabilityZone(*f3elemf1iter.Placement.AvailabilityZone)
						}
						if f3elemf1iter.Placement.GroupName != nil {
							f3elemf1elemf3.SetGroupName(*f3elemf1iter.Placement.GroupName)
						}
						if f3elemf1iter.Placement.HostID != nil {
							f3elemf1elemf3.SetHostId(*f3elemf1iter.Placement.HostID)
						}
						if f3elemf1iter.Placement.HostResourceGroupARN != nil {
							f3elemf1elemf3.SetHostResourceGroupArn(*f3elemf1iter.Placement.HostResourceGroupARN)
						}
						if f3elemf1iter.Placement.PartitionNumber != nil {
							f3elemf1elemf3.SetPartitionNumber(*f3elemf1iter.Placement.PartitionNumber)
						}
						if f3elemf1iter.Placement.SpreadDomain != nil {
							f3elemf1elemf3.SetSpreadDomain(*f3elemf1iter.Placement.SpreadDomain)
						}
						if f3elemf1iter.Placement.Tenancy != nil {
							f3elemf1elemf3.SetTenancy(*f3elemf1iter.Placement.Tenancy)
						}
						f3elemf1elem.SetPlacement(f3elemf1elemf3)
					}
					if f3elemf1iter.Priority != nil {
						f3elemf1elem.SetPriority(*f3elemf1iter.Priority)
					}
					if f3elemf1iter.SubnetID != nil {
						f3elemf1elem.SetSubnetId(*f3elemf1iter.SubnetID)
					}
					if f3elemf1iter.WeightedCapacity != nil {
						f3elemf1elem.SetWeightedCapacity(*f3elemf1iter.WeightedCapacity)
					}
					f3elemf1 = append(f3elemf1, f3elemf1elem)
				}
				f3elem.SetOverrides(f3elemf1)
			}
			f3 = append(f3, f3elem)
		}
		res.SetLaunchTemplateConfigs(f3)
	}
	if r.ko.Spec.TargetCapacitySpecification != nil {
		f4 := &svcsdk.TargetCapacitySpecificationRequest{}
		if r.ko.Spec.TargetCapacitySpecification.DefaultTargetCapacityType != nil {
			f4.SetDefaultTargetCapacityType(*r.ko.Spec.TargetCapacitySpecification.DefaultTargetCapacityType)
		}
		if r.ko.Spec.TargetCapacitySpecification.OnDemandTargetCapacity != nil {
			f4.SetOnDemandTargetCapacity(*r.ko.Spec.TargetCapacitySpecification.OnDemandTargetCapacity)
		}
		if r.ko.Spec.TargetCapacitySpecification.SpotTargetCapacity != nil {
			f4.SetSpotTargetCapacity(*r.ko.Spec.TargetCapacitySpecification.SpotTargetCapacity)
		}
		if r.ko.Spec.TargetCapacitySpecification.TotalTargetCapacity != nil {
			f4.SetTotalTargetCapacity(*r.ko.Spec.TargetCapacitySpecification.TotalTargetCapacity)
		}
		res.SetTargetCapacitySpecification(f4)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Fleet,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
