// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package nat_gateway

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.NatGateway{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeNatGatewaysWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeNatGateways", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.NatGateways {
		if elem.SubnetId != nil {
			ko.Spec.SubnetID = elem.SubnetId
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeNatGatewaysInput, error) {
	res := &svcsdk.DescribeNatGatewaysInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateNatGatewayWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateNatGateway", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.NatGateway != nil {
		f1 := &svcapitypes.NatGateway_SDK{}
		if resp.NatGateway.CreateTime != nil {
			f1.CreateTime = &metav1.Time{*resp.NatGateway.CreateTime}
		}
		if resp.NatGateway.DeleteTime != nil {
			f1.DeleteTime = &metav1.Time{*resp.NatGateway.DeleteTime}
		}
		if resp.NatGateway.FailureCode != nil {
			f1.FailureCode = resp.NatGateway.FailureCode
		}
		if resp.NatGateway.FailureMessage != nil {
			f1.FailureMessage = resp.NatGateway.FailureMessage
		}
		if resp.NatGateway.NatGatewayAddresses != nil {
			f1f4 := []*svcapitypes.NatGatewayAddress{}
			for _, f1f4iter := range resp.NatGateway.NatGatewayAddresses {
				f1f4elem := &svcapitypes.NatGatewayAddress{}
				if f1f4iter.AllocationId != nil {
					f1f4elem.AllocationID = f1f4iter.AllocationId
				}
				if f1f4iter.NetworkInterfaceId != nil {
					f1f4elem.NetworkInterfaceID = f1f4iter.NetworkInterfaceId
				}
				if f1f4iter.PrivateIp != nil {
					f1f4elem.PrivateIP = f1f4iter.PrivateIp
				}
				if f1f4iter.PublicIp != nil {
					f1f4elem.PublicIP = f1f4iter.PublicIp
				}
				f1f4 = append(f1f4, f1f4elem)
			}
			f1.NatGatewayAddresses = f1f4
		}
		if resp.NatGateway.NatGatewayId != nil {
			f1.NatGatewayID = resp.NatGateway.NatGatewayId
		}
		if resp.NatGateway.ProvisionedBandwidth != nil {
			f1f6 := &svcapitypes.ProvisionedBandwidth{}
			if resp.NatGateway.ProvisionedBandwidth.ProvisionTime != nil {
				f1f6.ProvisionTime = &metav1.Time{*resp.NatGateway.ProvisionedBandwidth.ProvisionTime}
			}
			if resp.NatGateway.ProvisionedBandwidth.Provisioned != nil {
				f1f6.Provisioned = resp.NatGateway.ProvisionedBandwidth.Provisioned
			}
			if resp.NatGateway.ProvisionedBandwidth.RequestTime != nil {
				f1f6.RequestTime = &metav1.Time{*resp.NatGateway.ProvisionedBandwidth.RequestTime}
			}
			if resp.NatGateway.ProvisionedBandwidth.Requested != nil {
				f1f6.Requested = resp.NatGateway.ProvisionedBandwidth.Requested
			}
			if resp.NatGateway.ProvisionedBandwidth.Status != nil {
				f1f6.Status = resp.NatGateway.ProvisionedBandwidth.Status
			}
			f1.ProvisionedBandwidth = f1f6
		}
		if resp.NatGateway.State != nil {
			f1.State = resp.NatGateway.State
		}
		if resp.NatGateway.SubnetId != nil {
			f1.SubnetID = resp.NatGateway.SubnetId
		}
		if resp.NatGateway.Tags != nil {
			f1f9 := []*svcapitypes.Tag{}
			for _, f1f9iter := range resp.NatGateway.Tags {
				f1f9elem := &svcapitypes.Tag{}
				if f1f9iter.Key != nil {
					f1f9elem.Key = f1f9iter.Key
				}
				if f1f9iter.Value != nil {
					f1f9elem.Value = f1f9iter.Value
				}
				f1f9 = append(f1f9, f1f9elem)
			}
			f1.Tags = f1f9
		}
		if resp.NatGateway.VpcId != nil {
			f1.VPCID = resp.NatGateway.VpcId
		}
		ko.Status.NatGateway = f1
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateNatGatewayInput, error) {
	res := &svcsdk.CreateNatGatewayInput{}

	if r.ko.Spec.AllocationID != nil {
		res.SetAllocationId(*r.ko.Spec.AllocationID)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.SubnetID != nil {
		res.SetSubnetId(*r.ko.Spec.SubnetID)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f4 := []*svcsdk.TagSpecification{}
		for _, f4iter := range r.ko.Spec.TagSpecifications {
			f4elem := &svcsdk.TagSpecification{}
			if f4iter.ResourceType != nil {
				f4elem.SetResourceType(*f4iter.ResourceType)
			}
			if f4iter.Tags != nil {
				f4elemf1 := []*svcsdk.Tag{}
				for _, f4elemf1iter := range f4iter.Tags {
					f4elemf1elem := &svcsdk.Tag{}
					if f4elemf1iter.Key != nil {
						f4elemf1elem.SetKey(*f4elemf1iter.Key)
					}
					if f4elemf1iter.Value != nil {
						f4elemf1elem.SetValue(*f4elemf1iter.Value)
					}
					f4elemf1 = append(f4elemf1, f4elemf1elem)
				}
				f4elem.SetTags(f4elemf1)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTagSpecifications(f4)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteNatGatewayWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteNatGateway", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteNatGatewayInput, error) {
	res := &svcsdk.DeleteNatGatewayInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.NatGateway,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
