// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package customer_gateway

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.CustomerGateway{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeCustomerGatewaysWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeCustomerGateways", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.CustomerGateways {
		if elem.BgpAsn != nil {
			ko.Spec.BGPASN = elem.BgpAsn
		}
		if elem.CertificateArn != nil {
			ko.Spec.CertificateARN = elem.CertificateArn
		}
		if elem.CustomerGatewayId != nil {
			ko.Status.CustomerGatewayID = elem.CustomerGatewayId
		}
		if elem.DeviceName != nil {
			ko.Spec.DeviceName = elem.DeviceName
		}
		if elem.IpAddress != nil {
			ko.Status.IPAddress = elem.IpAddress
		}
		if elem.State != nil {
			ko.Status.State = elem.State
		}
		if elem.Tags != nil {
			f6 := []*svcapitypes.Tag{}
			for _, f6iter := range elem.Tags {
				f6elem := &svcapitypes.Tag{}
				if f6iter.Key != nil {
					f6elem.Key = f6iter.Key
				}
				if f6iter.Value != nil {
					f6elem.Value = f6iter.Value
				}
				f6 = append(f6, f6elem)
			}
			ko.Status.Tags = f6
		}
		if elem.Type != nil {
			ko.Spec.Type = elem.Type
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeCustomerGatewaysInput, error) {
	res := &svcsdk.DescribeCustomerGatewaysInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateCustomerGatewayWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateCustomerGateway", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CustomerGateway.CustomerGatewayId != nil {
		ko.Status.CustomerGatewayID = resp.CustomerGateway.CustomerGatewayId
	}
	if resp.CustomerGateway.IpAddress != nil {
		ko.Status.IPAddress = resp.CustomerGateway.IpAddress
	}
	if resp.CustomerGateway.State != nil {
		ko.Status.State = resp.CustomerGateway.State
	}
	if resp.CustomerGateway.Tags != nil {
		f6 := []*svcapitypes.Tag{}
		for _, f6iter := range resp.CustomerGateway.Tags {
			f6elem := &svcapitypes.Tag{}
			if f6iter.Key != nil {
				f6elem.Key = f6iter.Key
			}
			if f6iter.Value != nil {
				f6elem.Value = f6iter.Value
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Tags = f6
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateCustomerGatewayInput, error) {
	res := &svcsdk.CreateCustomerGatewayInput{}

	if r.ko.Spec.BGPASN != nil {
		res.SetBgpAsn(*r.ko.Spec.BGPASN)
	}
	if r.ko.Spec.CertificateARN != nil {
		res.SetCertificateArn(*r.ko.Spec.CertificateARN)
	}
	if r.ko.Spec.DeviceName != nil {
		res.SetDeviceName(*r.ko.Spec.DeviceName)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.PublicIP != nil {
		res.SetPublicIp(*r.ko.Spec.PublicIP)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f5 := []*svcsdk.TagSpecification{}
		for _, f5iter := range r.ko.Spec.TagSpecifications {
			f5elem := &svcsdk.TagSpecification{}
			if f5iter.ResourceType != nil {
				f5elem.SetResourceType(*f5iter.ResourceType)
			}
			if f5iter.Tags != nil {
				f5elemf1 := []*svcsdk.Tag{}
				for _, f5elemf1iter := range f5iter.Tags {
					f5elemf1elem := &svcsdk.Tag{}
					if f5elemf1iter.Key != nil {
						f5elemf1elem.SetKey(*f5elemf1iter.Key)
					}
					if f5elemf1iter.Value != nil {
						f5elemf1elem.SetValue(*f5elemf1iter.Value)
					}
					f5elemf1 = append(f5elemf1, f5elemf1elem)
				}
				f5elem.SetTags(f5elemf1)
			}
			f5 = append(f5, f5elem)
		}
		res.SetTagSpecifications(f5)
	}
	if r.ko.Spec.Type != nil {
		res.SetType(*r.ko.Spec.Type)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteCustomerGatewayWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteCustomerGateway", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteCustomerGatewayInput, error) {
	res := &svcsdk.DeleteCustomerGatewayInput{}

	if r.ko.Status.CustomerGatewayID != nil {
		res.SetCustomerGatewayId(*r.ko.Status.CustomerGatewayID)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.CustomerGateway,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
