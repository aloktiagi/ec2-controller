// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package vpc_endpoint

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.VPCEndpoint{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeVpcEndpointsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeVpcEndpoints", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.VpcEndpoints {
		if elem.PolicyDocument != nil {
			ko.Spec.PolicyDocument = elem.PolicyDocument
		}
		if elem.PrivateDnsEnabled != nil {
			ko.Spec.PrivateDNSEnabled = elem.PrivateDnsEnabled
		}
		if elem.RouteTableIds != nil {
			f9 := []*string{}
			for _, f9iter := range elem.RouteTableIds {
				var f9elem string
				f9elem = *f9iter
				f9 = append(f9, &f9elem)
			}
			ko.Spec.RouteTableIDs = f9
		}
		if elem.ServiceName != nil {
			ko.Spec.ServiceName = elem.ServiceName
		}
		if elem.SubnetIds != nil {
			f12 := []*string{}
			for _, f12iter := range elem.SubnetIds {
				var f12elem string
				f12elem = *f12iter
				f12 = append(f12, &f12elem)
			}
			ko.Spec.SubnetIDs = f12
		}
		if elem.VpcEndpointType != nil {
			ko.Spec.VPCEndpointType = elem.VpcEndpointType
		}
		if elem.VpcId != nil {
			ko.Spec.VPCID = elem.VpcId
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeVpcEndpointsInput, error) {
	res := &svcsdk.DescribeVpcEndpointsInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateVpcEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateVpcEndpoint", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.VpcEndpoint != nil {
		f1 := &svcapitypes.VPCEndpoint_SDK{}
		if resp.VpcEndpoint.CreationTimestamp != nil {
			f1.CreationTimestamp = &metav1.Time{*resp.VpcEndpoint.CreationTimestamp}
		}
		if resp.VpcEndpoint.DnsEntries != nil {
			f1f1 := []*svcapitypes.DNSEntry{}
			for _, f1f1iter := range resp.VpcEndpoint.DnsEntries {
				f1f1elem := &svcapitypes.DNSEntry{}
				if f1f1iter.DnsName != nil {
					f1f1elem.DNSName = f1f1iter.DnsName
				}
				if f1f1iter.HostedZoneId != nil {
					f1f1elem.HostedZoneID = f1f1iter.HostedZoneId
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.DNSEntries = f1f1
		}
		if resp.VpcEndpoint.Groups != nil {
			f1f2 := []*svcapitypes.SecurityGroupIdentifier{}
			for _, f1f2iter := range resp.VpcEndpoint.Groups {
				f1f2elem := &svcapitypes.SecurityGroupIdentifier{}
				if f1f2iter.GroupId != nil {
					f1f2elem.GroupID = f1f2iter.GroupId
				}
				if f1f2iter.GroupName != nil {
					f1f2elem.GroupName = f1f2iter.GroupName
				}
				f1f2 = append(f1f2, f1f2elem)
			}
			f1.Groups = f1f2
		}
		if resp.VpcEndpoint.LastError != nil {
			f1f3 := &svcapitypes.LastError{}
			if resp.VpcEndpoint.LastError.Code != nil {
				f1f3.Code = resp.VpcEndpoint.LastError.Code
			}
			if resp.VpcEndpoint.LastError.Message != nil {
				f1f3.Message = resp.VpcEndpoint.LastError.Message
			}
			f1.LastError = f1f3
		}
		if resp.VpcEndpoint.NetworkInterfaceIds != nil {
			f1f4 := []*string{}
			for _, f1f4iter := range resp.VpcEndpoint.NetworkInterfaceIds {
				var f1f4elem string
				f1f4elem = *f1f4iter
				f1f4 = append(f1f4, &f1f4elem)
			}
			f1.NetworkInterfaceIDs = f1f4
		}
		if resp.VpcEndpoint.OwnerId != nil {
			f1.OwnerID = resp.VpcEndpoint.OwnerId
		}
		if resp.VpcEndpoint.PolicyDocument != nil {
			f1.PolicyDocument = resp.VpcEndpoint.PolicyDocument
		}
		if resp.VpcEndpoint.PrivateDnsEnabled != nil {
			f1.PrivateDNSEnabled = resp.VpcEndpoint.PrivateDnsEnabled
		}
		if resp.VpcEndpoint.RequesterManaged != nil {
			f1.RequesterManaged = resp.VpcEndpoint.RequesterManaged
		}
		if resp.VpcEndpoint.RouteTableIds != nil {
			f1f9 := []*string{}
			for _, f1f9iter := range resp.VpcEndpoint.RouteTableIds {
				var f1f9elem string
				f1f9elem = *f1f9iter
				f1f9 = append(f1f9, &f1f9elem)
			}
			f1.RouteTableIDs = f1f9
		}
		if resp.VpcEndpoint.ServiceName != nil {
			f1.ServiceName = resp.VpcEndpoint.ServiceName
		}
		if resp.VpcEndpoint.State != nil {
			f1.State = resp.VpcEndpoint.State
		}
		if resp.VpcEndpoint.SubnetIds != nil {
			f1f12 := []*string{}
			for _, f1f12iter := range resp.VpcEndpoint.SubnetIds {
				var f1f12elem string
				f1f12elem = *f1f12iter
				f1f12 = append(f1f12, &f1f12elem)
			}
			f1.SubnetIDs = f1f12
		}
		if resp.VpcEndpoint.Tags != nil {
			f1f13 := []*svcapitypes.Tag{}
			for _, f1f13iter := range resp.VpcEndpoint.Tags {
				f1f13elem := &svcapitypes.Tag{}
				if f1f13iter.Key != nil {
					f1f13elem.Key = f1f13iter.Key
				}
				if f1f13iter.Value != nil {
					f1f13elem.Value = f1f13iter.Value
				}
				f1f13 = append(f1f13, f1f13elem)
			}
			f1.Tags = f1f13
		}
		if resp.VpcEndpoint.VpcEndpointId != nil {
			f1.VPCEndpointID = resp.VpcEndpoint.VpcEndpointId
		}
		if resp.VpcEndpoint.VpcEndpointType != nil {
			f1.VPCEndpointType = resp.VpcEndpoint.VpcEndpointType
		}
		if resp.VpcEndpoint.VpcId != nil {
			f1.VPCID = resp.VpcEndpoint.VpcId
		}
		ko.Status.VPCEndpoint = f1
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateVpcEndpointInput, error) {
	res := &svcsdk.CreateVpcEndpointInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.PolicyDocument != nil {
		res.SetPolicyDocument(*r.ko.Spec.PolicyDocument)
	}
	if r.ko.Spec.PrivateDNSEnabled != nil {
		res.SetPrivateDnsEnabled(*r.ko.Spec.PrivateDNSEnabled)
	}
	if r.ko.Spec.RouteTableIDs != nil {
		f4 := []*string{}
		for _, f4iter := range r.ko.Spec.RouteTableIDs {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetRouteTableIds(f4)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f5 := []*string{}
		for _, f5iter := range r.ko.Spec.SecurityGroupIDs {
			var f5elem string
			f5elem = *f5iter
			f5 = append(f5, &f5elem)
		}
		res.SetSecurityGroupIds(f5)
	}
	if r.ko.Spec.ServiceName != nil {
		res.SetServiceName(*r.ko.Spec.ServiceName)
	}
	if r.ko.Spec.SubnetIDs != nil {
		f7 := []*string{}
		for _, f7iter := range r.ko.Spec.SubnetIDs {
			var f7elem string
			f7elem = *f7iter
			f7 = append(f7, &f7elem)
		}
		res.SetSubnetIds(f7)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f8 := []*svcsdk.TagSpecification{}
		for _, f8iter := range r.ko.Spec.TagSpecifications {
			f8elem := &svcsdk.TagSpecification{}
			if f8iter.ResourceType != nil {
				f8elem.SetResourceType(*f8iter.ResourceType)
			}
			if f8iter.Tags != nil {
				f8elemf1 := []*svcsdk.Tag{}
				for _, f8elemf1iter := range f8iter.Tags {
					f8elemf1elem := &svcsdk.Tag{}
					if f8elemf1iter.Key != nil {
						f8elemf1elem.SetKey(*f8elemf1iter.Key)
					}
					if f8elemf1iter.Value != nil {
						f8elemf1elem.SetValue(*f8elemf1iter.Value)
					}
					f8elemf1 = append(f8elemf1, f8elemf1elem)
				}
				f8elem.SetTags(f8elemf1)
			}
			f8 = append(f8, f8elem)
		}
		res.SetTagSpecifications(f8)
	}
	if r.ko.Spec.VPCEndpointType != nil {
		res.SetVpcEndpointType(*r.ko.Spec.VPCEndpointType)
	}
	if r.ko.Spec.VPCID != nil {
		res.SetVpcId(*r.ko.Spec.VPCID)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	_, respErr := rm.sdkapi.ModifyVpcEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyVpcEndpoint", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyVpcEndpointInput, error) {
	res := &svcsdk.ModifyVpcEndpointInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.PolicyDocument != nil {
		res.SetPolicyDocument(*r.ko.Spec.PolicyDocument)
	}
	if r.ko.Spec.PrivateDNSEnabled != nil {
		res.SetPrivateDnsEnabled(*r.ko.Spec.PrivateDNSEnabled)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.VPCEndpoint,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
