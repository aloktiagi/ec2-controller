// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package default_subnet

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.DefaultSubnet{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// Believe it or not, there are API resources that can be created but there
	// is no read operation. Point in case: RDS' CreateDBInstanceReadReplica
	// has no corresponding read operation that I know of...
	return nil, ackerr.NotImplemented
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateDefaultSubnetWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDefaultSubnet", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Subnet.AssignIpv6AddressOnCreation != nil {
		ko.Status.AssignIPv6AddressOnCreation = resp.Subnet.AssignIpv6AddressOnCreation
	}
	if resp.Subnet.AvailabilityZoneId != nil {
		ko.Status.AvailabilityZoneID = resp.Subnet.AvailabilityZoneId
	}
	if resp.Subnet.AvailableIpAddressCount != nil {
		ko.Status.AvailableIPAddressCount = resp.Subnet.AvailableIpAddressCount
	}
	if resp.Subnet.CidrBlock != nil {
		ko.Status.CIDRBlock = resp.Subnet.CidrBlock
	}
	if resp.Subnet.CustomerOwnedIpv4Pool != nil {
		ko.Status.CustomerOwnedIPv4Pool = resp.Subnet.CustomerOwnedIpv4Pool
	}
	if resp.Subnet.DefaultForAz != nil {
		ko.Status.DefaultForAZ = resp.Subnet.DefaultForAz
	}
	if resp.Subnet.Ipv6CidrBlockAssociationSet != nil {
		f7 := []*svcapitypes.SubnetIPv6CIDRBlockAssociation{}
		for _, f7iter := range resp.Subnet.Ipv6CidrBlockAssociationSet {
			f7elem := &svcapitypes.SubnetIPv6CIDRBlockAssociation{}
			if f7iter.AssociationId != nil {
				f7elem.AssociationID = f7iter.AssociationId
			}
			if f7iter.Ipv6CidrBlock != nil {
				f7elem.IPv6CIDRBlock = f7iter.Ipv6CidrBlock
			}
			if f7iter.Ipv6CidrBlockState != nil {
				f7elemf2 := &svcapitypes.SubnetCIDRBlockState{}
				if f7iter.Ipv6CidrBlockState.State != nil {
					f7elemf2.State = f7iter.Ipv6CidrBlockState.State
				}
				if f7iter.Ipv6CidrBlockState.StatusMessage != nil {
					f7elemf2.StatusMessage = f7iter.Ipv6CidrBlockState.StatusMessage
				}
				f7elem.IPv6CIDRBlockState = f7elemf2
			}
			f7 = append(f7, f7elem)
		}
		ko.Status.IPv6CIDRBlockAssociationSet = f7
	}
	if resp.Subnet.MapCustomerOwnedIpOnLaunch != nil {
		ko.Status.MapCustomerOwnedIPOnLaunch = resp.Subnet.MapCustomerOwnedIpOnLaunch
	}
	if resp.Subnet.MapPublicIpOnLaunch != nil {
		ko.Status.MapPublicIPOnLaunch = resp.Subnet.MapPublicIpOnLaunch
	}
	if resp.Subnet.OutpostArn != nil {
		ko.Status.OutpostARN = resp.Subnet.OutpostArn
	}
	if resp.Subnet.OwnerId != nil {
		ko.Status.OwnerID = resp.Subnet.OwnerId
	}
	if resp.Subnet.State != nil {
		ko.Status.State = resp.Subnet.State
	}
	if resp.Subnet.SubnetArn != nil {
		ko.Status.SubnetARN = resp.Subnet.SubnetArn
	}
	if resp.Subnet.SubnetId != nil {
		ko.Status.SubnetID = resp.Subnet.SubnetId
	}
	if resp.Subnet.Tags != nil {
		f15 := []*svcapitypes.Tag{}
		for _, f15iter := range resp.Subnet.Tags {
			f15elem := &svcapitypes.Tag{}
			if f15iter.Key != nil {
				f15elem.Key = f15iter.Key
			}
			if f15iter.Value != nil {
				f15elem.Value = f15iter.Value
			}
			f15 = append(f15, f15elem)
		}
		ko.Status.Tags = f15
	}
	if resp.Subnet.VpcId != nil {
		ko.Status.VPCID = resp.Subnet.VpcId
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDefaultSubnetInput, error) {
	res := &svcsdk.CreateDefaultSubnetInput{}

	if r.ko.Spec.AvailabilityZone != nil {
		res.SetAvailabilityZone(*r.ko.Spec.AvailabilityZone)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.DefaultSubnet,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
