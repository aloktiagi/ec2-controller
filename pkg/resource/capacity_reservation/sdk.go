// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package capacity_reservation

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.CapacityReservation{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.DescribeCapacityReservationsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeCapacityReservations", respErr)
	if respErr != nil {
		if awsErr, ok := ackerr.AWSError(respErr); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, respErr
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.CapacityReservations {
		if elem.AvailabilityZone != nil {
			ko.Spec.AvailabilityZone = elem.AvailabilityZone
		}
		if elem.AvailabilityZoneId != nil {
			ko.Spec.AvailabilityZoneID = elem.AvailabilityZoneId
		}
		if elem.AvailableInstanceCount != nil {
			ko.Status.AvailableInstanceCount = elem.AvailableInstanceCount
		}
		if elem.CapacityReservationArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.CapacityReservationArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.CapacityReservationId != nil {
			ko.Status.CapacityReservationID = elem.CapacityReservationId
		}
		if elem.CreateDate != nil {
			ko.Status.CreateDate = &metav1.Time{*elem.CreateDate}
		}
		if elem.EbsOptimized != nil {
			ko.Spec.EBSOptimized = elem.EbsOptimized
		}
		if elem.EndDate != nil {
			ko.Spec.EndDate = &metav1.Time{*elem.EndDate}
		}
		if elem.EndDateType != nil {
			ko.Spec.EndDateType = elem.EndDateType
		}
		if elem.EphemeralStorage != nil {
			ko.Spec.EphemeralStorage = elem.EphemeralStorage
		}
		if elem.InstanceMatchCriteria != nil {
			ko.Spec.InstanceMatchCriteria = elem.InstanceMatchCriteria
		}
		if elem.InstancePlatform != nil {
			ko.Spec.InstancePlatform = elem.InstancePlatform
		}
		if elem.InstanceType != nil {
			ko.Spec.InstanceType = elem.InstanceType
		}
		if elem.OwnerId != nil {
			ko.Status.OwnerID = elem.OwnerId
		}
		if elem.StartDate != nil {
			ko.Status.StartDate = &metav1.Time{*elem.StartDate}
		}
		if elem.State != nil {
			ko.Status.State = elem.State
		}
		if elem.Tags != nil {
			f16 := []*svcapitypes.Tag{}
			for _, f16iter := range elem.Tags {
				f16elem := &svcapitypes.Tag{}
				if f16iter.Key != nil {
					f16elem.Key = f16iter.Key
				}
				if f16iter.Value != nil {
					f16elem.Value = f16iter.Value
				}
				f16 = append(f16, f16elem)
			}
			ko.Status.Tags = f16
		}
		if elem.Tenancy != nil {
			ko.Spec.Tenancy = elem.Tenancy
		}
		if elem.TotalInstanceCount != nil {
			ko.Status.TotalInstanceCount = elem.TotalInstanceCount
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeCapacityReservationsInput, error) {
	res := &svcsdk.DescribeCapacityReservationsInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateCapacityReservationWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateCapacityReservation", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.CapacityReservation.AvailableInstanceCount != nil {
		ko.Status.AvailableInstanceCount = resp.CapacityReservation.AvailableInstanceCount
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.CapacityReservation.CapacityReservationArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.CapacityReservation.CapacityReservationArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CapacityReservation.CapacityReservationId != nil {
		ko.Status.CapacityReservationID = resp.CapacityReservation.CapacityReservationId
	}
	if resp.CapacityReservation.CreateDate != nil {
		ko.Status.CreateDate = &metav1.Time{*resp.CapacityReservation.CreateDate}
	}
	if resp.CapacityReservation.OwnerId != nil {
		ko.Status.OwnerID = resp.CapacityReservation.OwnerId
	}
	if resp.CapacityReservation.StartDate != nil {
		ko.Status.StartDate = &metav1.Time{*resp.CapacityReservation.StartDate}
	}
	if resp.CapacityReservation.State != nil {
		ko.Status.State = resp.CapacityReservation.State
	}
	if resp.CapacityReservation.Tags != nil {
		f16 := []*svcapitypes.Tag{}
		for _, f16iter := range resp.CapacityReservation.Tags {
			f16elem := &svcapitypes.Tag{}
			if f16iter.Key != nil {
				f16elem.Key = f16iter.Key
			}
			if f16iter.Value != nil {
				f16elem.Value = f16iter.Value
			}
			f16 = append(f16, f16elem)
		}
		ko.Status.Tags = f16
	}
	if resp.CapacityReservation.TotalInstanceCount != nil {
		ko.Status.TotalInstanceCount = resp.CapacityReservation.TotalInstanceCount
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateCapacityReservationInput, error) {
	res := &svcsdk.CreateCapacityReservationInput{}

	if r.ko.Spec.AvailabilityZone != nil {
		res.SetAvailabilityZone(*r.ko.Spec.AvailabilityZone)
	}
	if r.ko.Spec.AvailabilityZoneID != nil {
		res.SetAvailabilityZoneId(*r.ko.Spec.AvailabilityZoneID)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.EBSOptimized != nil {
		res.SetEbsOptimized(*r.ko.Spec.EBSOptimized)
	}
	if r.ko.Spec.EndDate != nil {
		res.SetEndDate(r.ko.Spec.EndDate.Time)
	}
	if r.ko.Spec.EndDateType != nil {
		res.SetEndDateType(*r.ko.Spec.EndDateType)
	}
	if r.ko.Spec.EphemeralStorage != nil {
		res.SetEphemeralStorage(*r.ko.Spec.EphemeralStorage)
	}
	if r.ko.Spec.InstanceCount != nil {
		res.SetInstanceCount(*r.ko.Spec.InstanceCount)
	}
	if r.ko.Spec.InstanceMatchCriteria != nil {
		res.SetInstanceMatchCriteria(*r.ko.Spec.InstanceMatchCriteria)
	}
	if r.ko.Spec.InstancePlatform != nil {
		res.SetInstancePlatform(*r.ko.Spec.InstancePlatform)
	}
	if r.ko.Spec.InstanceType != nil {
		res.SetInstanceType(*r.ko.Spec.InstanceType)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f12 := []*svcsdk.TagSpecification{}
		for _, f12iter := range r.ko.Spec.TagSpecifications {
			f12elem := &svcsdk.TagSpecification{}
			if f12iter.ResourceType != nil {
				f12elem.SetResourceType(*f12iter.ResourceType)
			}
			if f12iter.Tags != nil {
				f12elemf1 := []*svcsdk.Tag{}
				for _, f12elemf1iter := range f12iter.Tags {
					f12elemf1elem := &svcsdk.Tag{}
					if f12elemf1iter.Key != nil {
						f12elemf1elem.SetKey(*f12elemf1iter.Key)
					}
					if f12elemf1iter.Value != nil {
						f12elemf1elem.SetValue(*f12elemf1iter.Value)
					}
					f12elemf1 = append(f12elemf1, f12elemf1elem)
				}
				f12elem.SetTags(f12elemf1)
			}
			f12 = append(f12, f12elem)
		}
		res.SetTagSpecifications(f12)
	}
	if r.ko.Spec.Tenancy != nil {
		res.SetTenancy(*r.ko.Spec.Tenancy)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	_, respErr := rm.sdkapi.ModifyCapacityReservationWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyCapacityReservation", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyCapacityReservationInput, error) {
	res := &svcsdk.ModifyCapacityReservationInput{}

	if r.ko.Status.CapacityReservationID != nil {
		res.SetCapacityReservationId(*r.ko.Status.CapacityReservationID)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.EndDate != nil {
		res.SetEndDate(r.ko.Spec.EndDate.Time)
	}
	if r.ko.Spec.EndDateType != nil {
		res.SetEndDateType(*r.ko.Spec.EndDateType)
	}
	if r.ko.Spec.InstanceCount != nil {
		res.SetInstanceCount(*r.ko.Spec.InstanceCount)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {
	// TODO(jaypipes): Figure this out...
	return nil

}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.CapacityReservation,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
