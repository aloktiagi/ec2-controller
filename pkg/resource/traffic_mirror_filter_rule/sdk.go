// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package traffic_mirror_filter_rule

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.TrafficMirrorFilterRule{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	// Believe it or not, there are API resources that can be created but there
	// is no read operation. Point in case: RDS' CreateDBInstanceReadReplica
	// has no corresponding read operation that I know of...
	return nil, ackerr.NotImplemented
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a new resource with any fields in the Status field filled in
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	r *resource,
) (*resource, error) {
	input, err := rm.newCreateRequestPayload(ctx, r)
	if err != nil {
		return nil, err
	}

	resp, respErr := rm.sdkapi.CreateTrafficMirrorFilterRuleWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateTrafficMirrorFilterRule", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.TrafficMirrorFilterRule != nil {
		f1 := &svcapitypes.TrafficMirrorFilterRule_SDK{}
		if resp.TrafficMirrorFilterRule.Description != nil {
			f1.Description = resp.TrafficMirrorFilterRule.Description
		}
		if resp.TrafficMirrorFilterRule.DestinationCidrBlock != nil {
			f1.DestinationCIDRBlock = resp.TrafficMirrorFilterRule.DestinationCidrBlock
		}
		if resp.TrafficMirrorFilterRule.DestinationPortRange != nil {
			f1f2 := &svcapitypes.TrafficMirrorPortRange{}
			if resp.TrafficMirrorFilterRule.DestinationPortRange.FromPort != nil {
				f1f2.FromPort = resp.TrafficMirrorFilterRule.DestinationPortRange.FromPort
			}
			if resp.TrafficMirrorFilterRule.DestinationPortRange.ToPort != nil {
				f1f2.ToPort = resp.TrafficMirrorFilterRule.DestinationPortRange.ToPort
			}
			f1.DestinationPortRange = f1f2
		}
		if resp.TrafficMirrorFilterRule.Protocol != nil {
			f1.Protocol = resp.TrafficMirrorFilterRule.Protocol
		}
		if resp.TrafficMirrorFilterRule.RuleAction != nil {
			f1.RuleAction = resp.TrafficMirrorFilterRule.RuleAction
		}
		if resp.TrafficMirrorFilterRule.RuleNumber != nil {
			f1.RuleNumber = resp.TrafficMirrorFilterRule.RuleNumber
		}
		if resp.TrafficMirrorFilterRule.SourceCidrBlock != nil {
			f1.SourceCIDRBlock = resp.TrafficMirrorFilterRule.SourceCidrBlock
		}
		if resp.TrafficMirrorFilterRule.SourcePortRange != nil {
			f1f7 := &svcapitypes.TrafficMirrorPortRange{}
			if resp.TrafficMirrorFilterRule.SourcePortRange.FromPort != nil {
				f1f7.FromPort = resp.TrafficMirrorFilterRule.SourcePortRange.FromPort
			}
			if resp.TrafficMirrorFilterRule.SourcePortRange.ToPort != nil {
				f1f7.ToPort = resp.TrafficMirrorFilterRule.SourcePortRange.ToPort
			}
			f1.SourcePortRange = f1f7
		}
		if resp.TrafficMirrorFilterRule.TrafficDirection != nil {
			f1.TrafficDirection = resp.TrafficMirrorFilterRule.TrafficDirection
		}
		if resp.TrafficMirrorFilterRule.TrafficMirrorFilterId != nil {
			f1.TrafficMirrorFilterID = resp.TrafficMirrorFilterRule.TrafficMirrorFilterId
		}
		if resp.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId != nil {
			f1.TrafficMirrorFilterRuleID = resp.TrafficMirrorFilterRule.TrafficMirrorFilterRuleId
		}
		ko.Status.TrafficMirrorFilterRule = f1
	}

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateTrafficMirrorFilterRuleInput, error) {
	res := &svcsdk.CreateTrafficMirrorFilterRuleInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DestinationCIDRBlock != nil {
		res.SetDestinationCidrBlock(*r.ko.Spec.DestinationCIDRBlock)
	}
	if r.ko.Spec.DestinationPortRange != nil {
		f3 := &svcsdk.TrafficMirrorPortRangeRequest{}
		if r.ko.Spec.DestinationPortRange.FromPort != nil {
			f3.SetFromPort(*r.ko.Spec.DestinationPortRange.FromPort)
		}
		if r.ko.Spec.DestinationPortRange.ToPort != nil {
			f3.SetToPort(*r.ko.Spec.DestinationPortRange.ToPort)
		}
		res.SetDestinationPortRange(f3)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.Protocol != nil {
		res.SetProtocol(*r.ko.Spec.Protocol)
	}
	if r.ko.Spec.RuleAction != nil {
		res.SetRuleAction(*r.ko.Spec.RuleAction)
	}
	if r.ko.Spec.RuleNumber != nil {
		res.SetRuleNumber(*r.ko.Spec.RuleNumber)
	}
	if r.ko.Spec.SourceCIDRBlock != nil {
		res.SetSourceCidrBlock(*r.ko.Spec.SourceCIDRBlock)
	}
	if r.ko.Spec.SourcePortRange != nil {
		f9 := &svcsdk.TrafficMirrorPortRangeRequest{}
		if r.ko.Spec.SourcePortRange.FromPort != nil {
			f9.SetFromPort(*r.ko.Spec.SourcePortRange.FromPort)
		}
		if r.ko.Spec.SourcePortRange.ToPort != nil {
			f9.SetToPort(*r.ko.Spec.SourcePortRange.ToPort)
		}
		res.SetSourcePortRange(f9)
	}
	if r.ko.Spec.TrafficDirection != nil {
		res.SetTrafficDirection(*r.ko.Spec.TrafficDirection)
	}
	if r.ko.Spec.TrafficMirrorFilterID != nil {
		res.SetTrafficMirrorFilterId(*r.ko.Spec.TrafficMirrorFilterID)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	diffReporter *ackcompare.Reporter,
) (*resource, error) {

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	_, respErr := rm.sdkapi.ModifyTrafficMirrorFilterRuleWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyTrafficMirrorFilterRule", respErr)
	if respErr != nil {
		return nil, respErr
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyTrafficMirrorFilterRuleInput, error) {
	res := &svcsdk.ModifyTrafficMirrorFilterRuleInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DestinationCIDRBlock != nil {
		res.SetDestinationCidrBlock(*r.ko.Spec.DestinationCIDRBlock)
	}
	if r.ko.Spec.DestinationPortRange != nil {
		f2 := &svcsdk.TrafficMirrorPortRangeRequest{}
		if r.ko.Spec.DestinationPortRange.FromPort != nil {
			f2.SetFromPort(*r.ko.Spec.DestinationPortRange.FromPort)
		}
		if r.ko.Spec.DestinationPortRange.ToPort != nil {
			f2.SetToPort(*r.ko.Spec.DestinationPortRange.ToPort)
		}
		res.SetDestinationPortRange(f2)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.Protocol != nil {
		res.SetProtocol(*r.ko.Spec.Protocol)
	}
	if r.ko.Spec.RuleAction != nil {
		res.SetRuleAction(*r.ko.Spec.RuleAction)
	}
	if r.ko.Spec.RuleNumber != nil {
		res.SetRuleNumber(*r.ko.Spec.RuleNumber)
	}
	if r.ko.Spec.SourceCIDRBlock != nil {
		res.SetSourceCidrBlock(*r.ko.Spec.SourceCIDRBlock)
	}
	if r.ko.Spec.SourcePortRange != nil {
		f9 := &svcsdk.TrafficMirrorPortRangeRequest{}
		if r.ko.Spec.SourcePortRange.FromPort != nil {
			f9.SetFromPort(*r.ko.Spec.SourcePortRange.FromPort)
		}
		if r.ko.Spec.SourcePortRange.ToPort != nil {
			f9.SetToPort(*r.ko.Spec.SourcePortRange.ToPort)
		}
		res.SetSourcePortRange(f9)
	}
	if r.ko.Spec.TrafficDirection != nil {
		res.SetTrafficDirection(*r.ko.Spec.TrafficDirection)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) error {

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, respErr := rm.sdkapi.DeleteTrafficMirrorFilterRuleWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteTrafficMirrorFilterRule", respErr)
	return respErr
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteTrafficMirrorFilterRuleInput, error) {
	res := &svcsdk.DeleteTrafficMirrorFilterRuleInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.TrafficMirrorFilterRule,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
			break
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else if terminalCondition != nil {
		terminalCondition.Status = corev1.ConditionFalse
		terminalCondition.Message = nil
	}
	if terminalCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
