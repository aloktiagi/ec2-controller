// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SubnetSpec defines the desired state of Subnet
type SubnetSpec struct {
	AvailabilityZone   *string `json:"availabilityZone,omitempty"`
	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`
	// +kubebuilder:validation:Required
	CIDRBlock         *string             `json:"cidrBlock"`
	DryRun            *bool               `json:"dryRun,omitempty"`
	IPv6CIDRBlock     *string             `json:"ipv6CIDRBlock,omitempty"`
	OutpostARN        *string             `json:"outpostARN,omitempty"`
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcID"`
}

// SubnetStatus defines the observed state of Subnet
type SubnetStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions                  []*ackv1alpha1.Condition          `json:"conditions"`
	AssignIPv6AddressOnCreation *bool                             `json:"assignIPv6AddressOnCreation,omitempty"`
	AvailableIPAddressCount     *int64                            `json:"availableIPAddressCount,omitempty"`
	CustomerOwnedIPv4Pool       *string                           `json:"customerOwnedIPv4Pool,omitempty"`
	DefaultForAZ                *bool                             `json:"defaultForAZ,omitempty"`
	IPv6CIDRBlockAssociationSet []*SubnetIPv6CIDRBlockAssociation `json:"ipv6CIDRBlockAssociationSet,omitempty"`
	MapCustomerOwnedIPOnLaunch  *bool                             `json:"mapCustomerOwnedIPOnLaunch,omitempty"`
	MapPublicIPOnLaunch         *bool                             `json:"mapPublicIPOnLaunch,omitempty"`
	OwnerID                     *string                           `json:"ownerID,omitempty"`
	State                       *string                           `json:"state,omitempty"`
	SubnetID                    *string                           `json:"subnetID,omitempty"`
	Tags                        []*Tag                            `json:"tags,omitempty"`
}

// Subnet is the Schema for the Subnets API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Subnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubnetSpec   `json:"spec,omitempty"`
	Status            SubnetStatus `json:"status,omitempty"`
}

// SubnetList contains a list of Subnet
// +kubebuilder:object:root=true
type SubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subnet `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Subnet{}, &SubnetList{})
}
