// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VolumeSpec defines the desired state of Volume
type VolumeSpec struct {
	// +kubebuilder:validation:Required
	AvailabilityZone   *string             `json:"availabilityZone"`
	DryRun             *bool               `json:"dryRun,omitempty"`
	Encrypted          *bool               `json:"encrypted,omitempty"`
	IOPS               *int64              `json:"iops,omitempty"`
	KMSKeyID           *string             `json:"kmsKeyID,omitempty"`
	MultiAttachEnabled *bool               `json:"multiAttachEnabled,omitempty"`
	OutpostARN         *string             `json:"outpostARN,omitempty"`
	Size               *int64              `json:"size,omitempty"`
	SnapshotID         *string             `json:"snapshotID,omitempty"`
	TagSpecifications  []*TagSpecification `json:"tagSpecifications,omitempty"`
	VolumeType         *string             `json:"volumeType,omitempty"`
}

// VolumeStatus defines the observed state of Volume
type VolumeStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions   []*ackv1alpha1.Condition `json:"conditions"`
	Attachments  []*VolumeAttachment      `json:"attachments,omitempty"`
	CreateTime   *metav1.Time             `json:"createTime,omitempty"`
	FastRestored *bool                    `json:"fastRestored,omitempty"`
	State        *string                  `json:"state,omitempty"`
	Tags         []*Tag                   `json:"tags,omitempty"`
	VolumeID     *string                  `json:"volumeID,omitempty"`
}

// Volume is the Schema for the Volumes API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Volume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeSpec   `json:"spec,omitempty"`
	Status            VolumeStatus `json:"status,omitempty"`
}

// VolumeList contains a list of Volume
// +kubebuilder:object:root=true
type VolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Volume `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Volume{}, &VolumeList{})
}
