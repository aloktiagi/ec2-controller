// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// FleetSpec defines the desired state of Fleet
type FleetSpec struct {
	ClientToken                     *string `json:"clientToken,omitempty"`
	DryRun                          *bool   `json:"dryRun,omitempty"`
	ExcessCapacityTerminationPolicy *string `json:"excessCapacityTerminationPolicy,omitempty"`
	// +kubebuilder:validation:Required
	LaunchTemplateConfigs     []*FleetLaunchTemplateConfigRequest `json:"launchTemplateConfigs"`
	OnDemandOptions           *OnDemandOptionsRequest             `json:"onDemandOptions,omitempty"`
	ReplaceUnhealthyInstances *bool                               `json:"replaceUnhealthyInstances,omitempty"`
	SpotOptions               *SpotOptionsRequest                 `json:"spotOptions,omitempty"`
	TagSpecifications         []*TagSpecification                 `json:"tagSpecifications,omitempty"`
	// +kubebuilder:validation:Required
	TargetCapacitySpecification      *TargetCapacitySpecificationRequest `json:"targetCapacitySpecification"`
	TerminateInstancesWithExpiration *bool                               `json:"terminateInstancesWithExpiration,omitempty"`
	Type                             *string                             `json:"type_,omitempty"`
	ValidFrom                        *metav1.Time                        `json:"validFrom,omitempty"`
	ValidUntil                       *metav1.Time                        `json:"validUntil,omitempty"`
}

// FleetStatus defines the observed state of Fleet
type FleetStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	Errors     []*CreateFleetError      `json:"errors,omitempty"`
	FleetID    *string                  `json:"fleetID,omitempty"`
	Instances  []*CreateFleetInstance   `json:"instances,omitempty"`
}

// Fleet is the Schema for the Fleets API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Fleet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FleetSpec   `json:"spec,omitempty"`
	Status            FleetStatus `json:"status,omitempty"`
}

// FleetList contains a list of Fleet
// +kubebuilder:object:root=true
type FleetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Fleet `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Fleet{}, &FleetList{})
}
