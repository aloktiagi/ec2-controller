// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CapacityReservationSpec defines the desired state of CapacityReservation
type CapacityReservationSpec struct {
	AvailabilityZone   *string      `json:"availabilityZone,omitempty"`
	AvailabilityZoneID *string      `json:"availabilityZoneID,omitempty"`
	ClientToken        *string      `json:"clientToken,omitempty"`
	DryRun             *bool        `json:"dryRun,omitempty"`
	EBSOptimized       *bool        `json:"ebsOptimized,omitempty"`
	EndDate            *metav1.Time `json:"endDate,omitempty"`
	EndDateType        *string      `json:"endDateType,omitempty"`
	EphemeralStorage   *bool        `json:"ephemeralStorage,omitempty"`
	// +kubebuilder:validation:Required
	InstanceCount         *int64  `json:"instanceCount"`
	InstanceMatchCriteria *string `json:"instanceMatchCriteria,omitempty"`
	// +kubebuilder:validation:Required
	InstancePlatform *string `json:"instancePlatform"`
	// +kubebuilder:validation:Required
	InstanceType      *string             `json:"instanceType"`
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	Tenancy           *string             `json:"tenancy,omitempty"`
}

// CapacityReservationStatus defines the observed state of CapacityReservation
type CapacityReservationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions             []*ackv1alpha1.Condition `json:"conditions"`
	AvailableInstanceCount *int64                   `json:"availableInstanceCount,omitempty"`
	CapacityReservationID  *string                  `json:"capacityReservationID,omitempty"`
	CreateDate             *metav1.Time             `json:"createDate,omitempty"`
	OwnerID                *string                  `json:"ownerID,omitempty"`
	State                  *string                  `json:"state,omitempty"`
	Tags                   []*Tag                   `json:"tags,omitempty"`
	TotalInstanceCount     *int64                   `json:"totalInstanceCount,omitempty"`
}

// CapacityReservation is the Schema for the CapacityReservations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type CapacityReservation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CapacityReservationSpec   `json:"spec,omitempty"`
	Status            CapacityReservationStatus `json:"status,omitempty"`
}

// CapacityReservationList contains a list of CapacityReservation
// +kubebuilder:object:root=true
type CapacityReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CapacityReservation `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CapacityReservation{}, &CapacityReservationList{})
}
